<!-- Header con bienvenida -->
<div class="bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg p-6 mb-6 text-white">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold">¡Hola, <%= user.nickname %>!</h1>
            <p class="text-blue-100 mt-1">Bienvenido a tu dashboard de miembro del <%= user.grupo %></p>
        </div>
        
        <div class="flex items-center space-x-4">
            <!-- Bloque de tareas pendientes (solo para miembros y scrum masters) -->
            <% if (user.rol === 'miembro' || user.rol === 'scrumMaster') { %>
                <div class="bg-white bg-opacity-20 rounded-lg p-2">
                    <div class="text-sm font-medium">Tareas Pendientes</div>
                    <div class="text-2xl font-bold flex items-center justify-center">
                        <span id="contador-tareas-pendientes">0</span>
                    </div>
                </div>
            <% } %>
            
            <!-- Bloque de rol (siempre visible) -->
            <div class="bg-white bg-opacity-20 rounded-lg p-2">
                <div class="text-sm font-medium">Tu rol</div>
                <div class="text-2xl font-bold capitalize"><%= user.rol %></div>
            </div>
        </div>
    </div>
</div>

<!-- Selector de proyectos -->
<div class="mb-6">
    <h2 class="text-xl font-semibold text-gray-900 mb-4">Seleccionar Proyecto</h2>
    <div id="dashboard-proyecto-selector" class="flex flex-wrap gap-3">
        <!-- Los proyectos se cargarán dinámicamente -->
    </div>
</div>

<!-- Contenido del proyecto seleccionado -->
<div id="dashboard-proyecto-content" class="hidden">
    <!-- Selector de sprints -->
    <div class="mb-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-3">Sprints</h3>
        <div id="dashboard-sprint-selector" class="flex flex-wrap gap-2">
            <!-- Los sprints se cargarán dinámicamente -->
        </div>
    </div>

    <!-- Scrumboard -->
    <div id="dashboard-scrumboard-container" class="mb-8">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Scrumboard</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Por Hacer -->
            <div class="scrumboard-column">
                <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                    <div class="w-3 h-3 bg-gray-400 rounded-full mr-2"></div>
                    Por Hacer
                    <span id="dashboard-count-por-hacer" class="ml-2 bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full">0</span>
                </h4>
                <div id="dashboard-historias-por-hacer" class="space-y-3">
                    <!-- Historias se cargarán aquí -->
                </div>
            </div>

            <!-- En Proceso -->
            <div class="scrumboard-column">
                <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                    <div class="w-3 h-3 bg-blue-400 rounded-full mr-2"></div>
                    En Proceso
                    <span id="dashboard-count-en-proceso" class="ml-2 bg-blue-200 text-blue-700 text-xs px-2 py-1 rounded-full">0</span>
                </h4>
                <div id="dashboard-historias-en-proceso" class="space-y-3">
                    <!-- Historias se cargarán aquí -->
                </div>
            </div>

            <!-- Completado -->
            <div class="scrumboard-column">
                <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                    <div class="w-3 h-3 bg-green-400 rounded-full mr-2"></div>
                    Completado
                    <span id="dashboard-count-completado" class="ml-2 bg-green-200 text-green-700 text-xs px-2 py-1 rounded-full">0</span>
                </h4>
                <div id="dashboard-historias-completado" class="space-y-3">
                    <!-- Historias se cargarán aquí -->
                </div>
            </div>
        </div>
    </div>

    <!-- Lista de tareas -->
    <div id="dashboard-tareas-container">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Tareas del Sprint</h3>
        <div id="dashboard-tareas-list" class="space-y-3">
            <!-- Las tareas se cargarán aquí -->
        </div>
    </div>
</div>

<!-- Mensaje cuando no hay proyecto seleccionado -->
<div id="dashboard-no-proyecto-message" class="text-center py-12">
    <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2-2m0 0V5a2 2 0 012-2h14a2 2 0 012 2v2M7 7h10"></path>
    </svg>
    <h3 class="text-lg font-medium text-gray-900 mb-2">Selecciona un proyecto</h3>
    <p class="text-gray-500">Elige un proyecto para ver el scrumboard y tus tareas</p>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Esperar a que la aplicación principal esté lista
    if (!window.miembroApp) {
        window.addEventListener('miembroAppReady', initDashboard);
    } else {
        initDashboard();
    }

    function initDashboard() {
        console.log('🎯 Inicializando Dashboard...');
        
        // ============================================
        // VARIABLES LOCALES DEL DASHBOARD
        // ============================================
        
        const dashboardState = {
            selectedProject: null,
            selectedSprint: null,
            proyectosDisponibles: [],
            sprintsDisponibles: [],
            autoRefreshInterval: null
        };

        // ============================================
        // GESTIÓN DE PROYECTOS
        // ============================================
        
        async function cargarProyectosDisponibles() {
            try {
                window.showLoading(true);
                
                const response = await fetch('/api/mi-grupo/proyectos');
                if (!response.ok) {
                    throw new Error('Error obteniendo proyectos del grupo');
                }
                
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Error en la respuesta');
                }
                
                dashboardState.proyectosDisponibles = data.data.proyectos.map(p => p.nombre);
                window.miembroApp.setProyectosDisponibles(dashboardState.proyectosDisponibles);
                
                console.log('Proyectos disponibles para el dashboard:', dashboardState.proyectosDisponibles);
                renderizarSelectorProyectos();
                
            } catch (error) {
                console.error('Error cargando proyectos:', error);
                window.showToast('Error cargando proyectos: ' + error.message, 'error');
                
                // Fallback con proyectos por defecto
                dashboardState.proyectosDisponibles = ['GenT', 'Proy'];
                renderizarSelectorProyectos();
            } finally {
                window.showLoading(false);
            }
        }

        function renderizarSelectorProyectos() {
            const selector = document.getElementById('dashboard-proyecto-selector');
            if (!selector) return;
            
            const proyectosHTML = dashboardState.proyectosDisponibles.map(proyecto => {
                const nombre = proyecto === 'GenT' ? 'GenT' : 
                            proyecto === 'Proy' ? 'Proyecto Principal' : 
                            proyecto === 'Proy2' ? 'Proyecto 2' : proyecto;
                const icono = proyecto === 'GenT' ? 
                    'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253' :
                    'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2-2m0 0V5a2 2 0 012-2h14a2 2 0 012 2v2M7 7h10';
                                
                return `
                    <button class="dashboard-proyecto-tab bg-white border-2 border-gray-200 rounded-xl p-4 transition-all duration-300 hover:border-blue-400 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" data-proyecto="${proyecto}">
                        <div class="flex items-center space-x-3">
                            <div class="flex-shrink-0 p-2 bg-gray-100 rounded-lg">
                                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${icono}"></path>
                                </svg>
                            </div>
                            <div class="text-left">
                                <div class="font-semibold text-gray-900">${nombre}</div>
                                <div class="text-sm text-gray-500">Proyecto activo</div>
                            </div>
                        </div>
                    </button>
                `;
            }).join('');
            
            selector.innerHTML = proyectosHTML;
        }

        async function seleccionarProyecto(proyecto) {
            try {
                window.showLoading(true);
                dashboardState.selectedProject = proyecto;
                window.miembroApp.setSelectedProject(proyecto);
                
                console.log('Dashboard - Proyecto seleccionado:', proyecto);
                
                // Actualizar UI del selector
                document.querySelectorAll('.dashboard-proyecto-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-proyecto="${proyecto}"]`)?.classList.add('active');

                // Cargar datos del proyecto
                await cargarDatosSprint(proyecto);
                document.getElementById('dashboard-proyecto-content').classList.remove('hidden');
                document.getElementById('dashboard-no-proyecto-message').classList.add('hidden');
                
            } catch (error) {
                console.error('Error seleccionando proyecto en dashboard:', error);
                window.showToast('Error cargando proyecto: ' + error.message, 'error');
            } finally {
                window.showLoading(false);
            }
        }

        // ============================================
        // GESTIÓN DE SPRINTS
        // ============================================
        
        async function cargarDatosSprint(proyecto) {
            try {
                const response = await fetch(`/api/proyecto/${proyecto}/info`);
                if (!response.ok) {
                    throw new Error('Error obteniendo información del proyecto');
                }
                
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Error en la respuesta del proyecto');
                }
                
                const proyectoInfo = data.data;
                dashboardState.sprintsDisponibles = proyectoInfo.sprints || ['1'];
                window.miembroApp.setSprintsDisponibles(dashboardState.sprintsDisponibles);
                const sprintActual = proyectoInfo.sprintActual || '1';
                
                console.log('Sprints disponibles para', proyecto, ':', dashboardState.sprintsDisponibles);
                console.log('Sprint actual:', sprintActual);
                
                renderizarSelectorSprints(sprintActual);
                await seleccionarSprint(sprintActual);
                
            } catch (error) {
                console.error('Error cargando datos del sprint:', error);
                // Fallback
                dashboardState.sprintsDisponibles = ['1', '2', '3'];
                renderizarSelectorSprints('1');
                await seleccionarSprint('1');
            }
        }

        function renderizarSelectorSprints(sprintActual) {
            const selector = document.getElementById('dashboard-sprint-selector');
            if (!selector) return;

            const sprintsHTML = dashboardState.sprintsDisponibles.map(sprint => {
                const esActual = sprint === sprintActual;
                return `
                    <button class="dashboard-sprint-tab bg-white border-2 border-gray-200 rounded-lg px-4 py-2 transition-all duration-300 hover:border-green-400 hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 ${esActual ? 'border-green-500 bg-green-100' : ''}" data-sprint="${sprint}">
                        <div class="flex items-center space-x-2">
                            <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                            </svg>
                            <span class="font-medium">Sprint ${sprint}</span>
                            ${esActual ? '<span class="text-xs bg-green-600 text-white px-2 py-1 rounded-full ml-2">Actual</span>' : ''}
                        </div>
                    </button>
                `;
            }).join('');
            
            selector.innerHTML = sprintsHTML;
        }

        async function seleccionarSprint(sprint) {
            try {
                dashboardState.selectedSprint = sprint;
                window.miembroApp.setSelectedSprint(sprint);
                
                console.log('Dashboard - Sprint seleccionado:', sprint);
                
                // Actualizar UI del selector
                document.querySelectorAll('.dashboard-sprint-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-sprint="${sprint}"]`)?.classList.add('active');

                // Cargar datos del sprint
                await Promise.all([
                    cargarScrumboard(dashboardState.selectedProject, sprint),
                    cargarTareasSprint(dashboardState.selectedProject, sprint)
                ]);
                
            } catch (error) {
                console.error('Error seleccionando sprint en dashboard:', error);
                window.showToast('Error cargando sprint: ' + error.message, 'error');
            }
        }

        // ============================================
        // SCRUMBOARD
        // ============================================
        
        async function cargarScrumboard(proyecto, sprint) {
            try {
                const response = await fetch(`/api/historias/${proyecto}/sprint${sprint}`);
                const data = await response.json();
                
                if (!data.success) {
                    console.warn('No se pudo cargar scrumboard del sprint, mostrando vacío');
                    renderizarScrumboard([]);
                    return;
                }

                const historias = data.data || [];
                console.log(`Dashboard - Historias del sprint ${sprint}:`, historias);
                renderizarScrumboard(historias);
                
            } catch (error) {
                console.error('Error cargando scrumboard:', error);
                renderizarScrumboard([]);
            }
        }

        function renderizarScrumboard(historias) {
            const porHacer = historias.filter(h => h[7] === 'POR_HACER' || h[7] === 'TODO');
            const enProceso = historias.filter(h => h[7] === 'EN_PROCESO' || h[7] === 'IN_PROGRESS');
            const completado = historias.filter(h => h[7] === 'COMPLETADO' || h[7] === 'DONE');

            // Actualizar contadores
            document.getElementById('dashboard-count-por-hacer').textContent = porHacer.length;
            document.getElementById('dashboard-count-en-proceso').textContent = enProceso.length;
            document.getElementById('dashboard-count-completado').textContent = completado.length;

            // Renderizar historias en cada columna
            document.getElementById('dashboard-historias-por-hacer').innerHTML = renderizarHistoriasScrumboard(porHacer);
            document.getElementById('dashboard-historias-en-proceso').innerHTML = renderizarHistoriasScrumboard(enProceso);
            document.getElementById('dashboard-historias-completado').innerHTML = renderizarHistoriasScrumboard(completado);
        }

        function renderizarHistoriasScrumboard(historias) {
            if (historias.length === 0) {
                return `
                    <div class="scrumboard-empty-state">
                        <svg class="w-8 h-8 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        <p class="text-xs text-gray-500 text-center">No hay historias</p>
                    </div>
                `;
            }

            return historias.map(historia => {
                const [id, titulo, como, quiero, para, prioridad, storyPoints, estado] = historia;
                
                return `
                    <div class="scrumboard-story-card" data-historia-id="${id}">
                        <div class="scrumboard-story-header">
                            <h5 class="scrumboard-story-title">${titulo}</h5>
                            <div class="scrumboard-story-badges">
                                <span class="priority-badge priority-${prioridad.toLowerCase()}">${prioridad}</span>
                                <span class="story-points-badge">${storyPoints} SP</span>
                            </div>
                        </div>
                        <div class="scrumboard-story-content">
                            <div class="story-detail">
                                <span class="story-label">Como:</span> 
                                <span class="story-text">${como}</span>
                            </div>
                            <div class="story-detail">
                                <span class="story-label">Quiero:</span> 
                                <span class="story-text">${quiero}</span>
                            </div>
                            <div class="story-detail">
                                <span class="story-label">Para:</span> 
                                <span class="story-text">${para}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // ============================================
        // TAREAS
        // ============================================
        
        async function cargarTareasSprint(proyecto, sprint) {
            try {
                const response = await fetch(`/api/tareas/${proyecto}/sprint${sprint}`);
                const data = await response.json();
                
                if (!data.success) {
                    console.warn('No se pudieron cargar tareas, mostrando lista vacía');
                    renderizarTareas([]);
                    return;
                }

                const tareas = Object.values(data.data || {});
                renderizarTareas(tareas);
                
            } catch (error) {
                console.error('Error cargando tareas:', error);
                renderizarTareas([]);
            }
        }

        function renderizarTareas(tareas) {
            const container = document.getElementById('dashboard-tareas-list');
            if (!container) return;

            if (tareas.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <svg class="w-12 h-12 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        <p>No hay tareas en este sprint</p>
                    </div>
                `;
                return;
            }

            const tareasHTML = tareas.map(tarea => {
                const esAsignada = tarea.personas_asignadas && tarea.personas_asignadas.includes(window.miembroApp.currentUser.nickname);
                const puedeInteractuar = esAsignada;

                return `
                    <div class="dashboard-tarea-card ${esAsignada ? 'asignada' : ''}" data-tarea-id="${tarea.id}">
                        <div class="flex justify-between items-start mb-3">
                            <div class="flex-1">
                                <h4 class="font-medium text-gray-900">${tarea.nombre}</h4>
                                <p class="text-sm text-gray-600 mt-1">${tarea.descripcion}</p>
                            </div>
                            <div class="flex items-center space-x-2 ml-4">
                                <span class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">${tarea.estimacion || 0}h</span>
                                ${esAsignada ? '<span class="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded font-medium">Asignada a ti</span>' : ''}
                            </div>
                        </div>
                        
                        <div class="flex justify-between items-center">
                            <div class="text-xs text-gray-500">
                                <strong>Asignada a:</strong> ${tarea.personas_asignadas && tarea.personas_asignadas.length > 0 ? tarea.personas_asignadas.join(', ') : 'Sin asignar'}
                            </div>
                            
                            ${puedeInteractuar ? `
                                <select class="dashboard-estado-select text-xs border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                        data-tarea-id="${tarea.id}" 
                                        data-original-value="${tarea.estado}">
                                    <option value="POR_HACER" ${tarea.estado === 'POR_HACER' ? 'selected' : ''}>Por Hacer</option>
                                    <option value="EN_PROCESO" ${tarea.estado === 'EN_PROCESO' ? 'selected' : ''}>En Proceso</option>
                                    <option value="COMPLETADO" ${tarea.estado === 'COMPLETADO' ? 'selected' : ''}>Completado</option>
                                </select>
                            ` : `
                                <span class="text-xs px-2 py-1 rounded font-medium ${
                                    tarea.estado === 'COMPLETADO' ? 'bg-green-100 text-green-800' :
                                    tarea.estado === 'EN_PROCESO' ? 'bg-blue-100 text-blue-800' :
                                    'bg-gray-100 text-gray-800'
                                }">
                                    ${tarea.estado.replace('_', ' ')}
                                </span>
                            `}
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = tareasHTML;
        }

        // ============================================
        // ACTUALIZACIÓN DE ESTADOS
        // ============================================
        
        async function actualizarEstadoTarea(tareaId, nuevoEstado) {
            try {
                window.showLoading(true);
                
                const response = await fetch(`/api/tareas/${dashboardState.selectedProject}/sprint${dashboardState.selectedSprint}/${tareaId}/estado`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ estado: nuevoEstado })
                });

                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Error actualizando tarea');
                }

                window.showToast('Estado de tarea actualizado correctamente', 'success');
                
                await cargarTareasSprint(dashboardState.selectedProject, dashboardState.selectedSprint);
                
            } catch (error) {
                console.error('Error actualizando estado de tarea:', error);
                window.showToast('Error actualizando tarea: ' + error.message, 'error');
                
                const selector = document.querySelector(`[data-tarea-id="${tareaId}"] .dashboard-estado-select`);
                if (selector) {
                    selector.value = selector.dataset.originalValue || 'POR_HACER';
                }
            } finally {
                window.showLoading(false);
            }
        }

        // ============================================
        // EVENT LISTENERS DEL DASHBOARD
        // ============================================
        
        function configurarEventListenersDashboard() {
            // Selección de proyectos
            document.getElementById('dashboard-proyecto-selector')?.addEventListener('click', function(e) {
                const boton = e.target.closest('.dashboard-proyecto-tab');
                if (boton) {
                    const proyecto = boton.dataset.proyecto;
                    if (proyecto) {
                        seleccionarProyecto(proyecto);
                    }
                }
            });

            // Selección de sprints
            document.getElementById('dashboard-sprint-selector')?.addEventListener('click', function(e) {
                const boton = e.target.closest('.dashboard-sprint-tab');
                if (boton) {
                    const sprint = boton.dataset.sprint;
                    if (sprint) {
                        seleccionarSprint(sprint);
                    }
                }
            });

            // Actualización de estados de tareas
            document.getElementById('dashboard-tareas-list')?.addEventListener('change', function(e) {
                if (e.target.classList.contains('dashboard-estado-select')) {
                    const tareaId = e.target.dataset.tareaId;
                    const nuevoEstado = e.target.value;
                    const estadoAnterior = e.target.dataset.originalValue || 'POR_HACER';
                    
                    if (nuevoEstado === 'COMPLETADO' && estadoAnterior !== 'COMPLETADO') {
                        if (confirm('¿Marcar esta tarea como completada?')) {
                            actualizarEstadoTarea(tareaId, nuevoEstado);
                        } else {
                            e.target.value = estadoAnterior;
                        }
                    } else {
                        actualizarEstadoTarea(tareaId, nuevoEstado);
                    }
                }
            });

            // Atajos de teclado específicos del dashboard
            document.addEventListener('keydown', function(e) {
                // Solo actuar si estamos en la sección dashboard
                if (window.miembroApp.currentSection !== 'dashboard') return;
                
                if (e.altKey && ['1', '2', '3'].includes(e.key)) {
                    e.preventDefault();
                    const proyectoIndex = parseInt(e.key) - 1;
                    if (dashboardState.proyectosDisponibles[proyectoIndex]) {
                        seleccionarProyecto(dashboardState.proyectosDisponibles[proyectoIndex]);
                    }
                }
            });
        }

        // ============================================
        // INICIALIZACIÓN DEL DASHBOARD
        // ============================================
        
        function inicializarDashboard() {
            cargarProyectosDisponibles();
            configurarEventListenersDashboard();
            
            // Configurar auto-refresh
            dashboardState.autoRefreshInterval = setInterval(async () => {
                if (dashboardState.selectedProject && dashboardState.selectedSprint && window.miembroApp.currentSection === 'dashboard') {
                    try {
                        await Promise.all([
                            cargarScrumboard(dashboardState.selectedProject, dashboardState.selectedSprint),
                            cargarTareasSprint(dashboardState.selectedProject, dashboardState.selectedSprint)
                        ]);
                    } catch (error) {
                        console.error('Error en actualización automática del dashboard:', error);
                    }
                }
            }, 30000); // 30 segundos
        }

        // ============================================
        // GESTIÓN DE EVENTOS GLOBALES
        // ============================================
        
        // Escuchar cambios de sección
        window.addEventListener('sectionChanged', function(e) {
            if (e.detail.section === 'dashboard') {
                // Reinicializar dashboard cuando se selecciona
                dashboardState.selectedProject = null;
                dashboardState.selectedSprint = null;
                document.getElementById('dashboard-proyecto-content').classList.add('hidden');
                document.getElementById('dashboard-no-proyecto-message').classList.remove('hidden');
                
                // Limpiar selecciones visuales
                document.querySelectorAll('.dashboard-proyecto-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
            }
        });

        // Cleanup cuando se cierre la ventana
        window.addEventListener('beforeunload', () => {
            if (dashboardState.autoRefreshInterval) {
                clearInterval(dashboardState.autoRefreshInterval);
            }
        });

        // Inicializar
        inicializarDashboard();
        
        console.log('✅ Dashboard inicializado correctamente');
    }
});
</script>

<style>
    /* ============================================
       ESTILOS ESPECÍFICOS DEL DASHBOARD
       ============================================ */
    
    .dashboard-proyecto-tab {
        @apply cursor-pointer transition-all duration-300;
    }
    
    .dashboard-proyecto-tab.active {
        @apply border-blue-500 bg-blue-100 shadow-lg;
    }
    
    .dashboard-proyecto-tab.active .flex-shrink-0 {
        @apply bg-blue-200;
    }
    
    .dashboard-proyecto-tab.active svg {
        @apply text-blue-600;
    }
    
    .dashboard-sprint-tab {
        @apply cursor-pointer transition-all duration-300;
    }
    
    .dashboard-sprint-tab.active {
        @apply border-green-500 bg-green-100 shadow-md;
    }
    
    .dashboard-sprint-tab:not(.active):hover {
        @apply border-green-400 bg-green-50;
    }

    .dashboard-tarea-card {
        @apply border border-gray-200 rounded-lg p-3 transition-all duration-200;
    }
    
    .dashboard-tarea-card.asignada {
        @apply bg-yellow-50 border-yellow-200 hover:bg-yellow-100;
    }
    
    .dashboard-tarea-card:not(.asignada) {
        @apply bg-white hover:bg-gray-50;
    }

    /* ============================================
       SCRUMBOARD STYLES - Dashboard específico
       ============================================ */

    .scrumboard-column {
        @apply bg-gradient-to-b from-gray-50 to-gray-100 rounded-xl p-5 min-h-[300px] border border-gray-200;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }

    .scrumboard-story-card {
        @apply bg-white rounded-lg border border-gray-200 p-4 mb-3 shadow-sm transition-all duration-300;
        cursor: pointer;
    }

    .scrumboard-story-card:hover {
        @apply shadow-md border-gray-300;
        transform: translateY(-2px);
    }

    .scrumboard-story-header {
        @apply flex justify-between items-start mb-3;
    }

    .scrumboard-story-title {
        @apply font-semibold text-gray-900 text-sm leading-tight flex-1 mr-2;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .scrumboard-story-badges {
        @apply flex flex-col space-y-1 flex-shrink-0;
    }

    .scrumboard-story-content {
        @apply space-y-2;
    }

    .story-detail {
        @apply text-xs text-gray-600 flex flex-col;
    }

    .story-label {
        @apply font-medium text-gray-800 mb-1;
    }

    .story-text {
        @apply text-gray-600 leading-relaxed;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .story-points-badge {
        @apply text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full font-medium text-center;
    }

    .scrumboard-empty-state {
        @apply text-center py-8 px-4 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50;
    }

    /* Estados visuales mejorados */
    .dashboard-estado-select:focus {
        @apply ring-2 ring-blue-500 ring-opacity-50;
    }

    .dashboard-proyecto-tab:focus {
        @apply ring-2 ring-blue-500 ring-opacity-50 outline-none;
    }

    .dashboard-sprint-tab:focus {
        @apply ring-2 ring-green-500 ring-opacity-50 outline-none;
    }

    /* Selector containers */
    #dashboard-proyecto-selector {
        @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
    }

    #dashboard-sprint-selector {
        @apply flex flex-wrap gap-3;
    }

    /* ============================================
       RESPONSIVE MEJORAS ESPECÍFICAS
       ============================================ */

    @media (max-width: 768px) {
        .scrumboard-story-card {
            @apply p-3;
        }
        
        .scrumboard-story-title {
            @apply text-xs;
        }

        .dashboard-proyecto-tab {
            @apply text-sm;
        }
        
        .dashboard-sprint-tab {
            @apply text-xs px-3 py-2;
        }
        
        .dashboard-tarea-card {
            @apply text-sm;
        }
    }
</style>