<!-- Header del backlog -->
<div class="bg-gradient-to-r from-green-600 to-teal-600 rounded-lg p-6 mb-6 text-white">
    <h2 class="text-2xl font-bold">Product Backlog</h2>
    <p class="text-green-100 mt-1">Historias de usuario de los proyectos</p>
</div>

<!-- Selector de proyectos para backlog -->
<div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Seleccionar Proyecto</h3>
    <div id="backlog-proyecto-selector" class="flex flex-wrap gap-3">
        <!-- Los proyectos se cargarán dinámicamente -->
    </div>
</div>

<!-- Contenido del backlog -->
<div id="backlog-proyecto-content" class="hidden">
    <div class="mb-4 flex justify-between items-center">
        <h4 id="backlog-proyecto-title" class="text-lg font-medium text-gray-900"></h4>
        <div id="backlog-stats" class="flex space-x-4 text-sm text-gray-600">
            <!-- Estadísticas del backlog -->
        </div>
    </div>
    <div id="backlog-historias" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Las historias se cargarán aquí -->
    </div>
</div>

<!-- Mensaje cuando no hay proyecto seleccionado en backlog -->
<div id="no-backlog-proyecto-message" class="text-center py-12">
    <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
    </svg>
    <h3 class="text-lg font-medium text-gray-900 mb-2">Selecciona un proyecto</h3>
    <p class="text-gray-500">Elige un proyecto para ver su Product Backlog</p>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Esperar a que la aplicación principal esté lista
    if (!window.miembroApp) {
        window.addEventListener('miembroAppReady', initProductBacklog);
    } else {
        initProductBacklog();
    }

    function initProductBacklog() {
        console.log('📚 Inicializando Product Backlog...');
        
        // ============================================
        // VARIABLES LOCALES DEL PRODUCT BACKLOG
        // ============================================
        
        const backlogState = {
            selectedProject: null,
            proyectosDisponibles: []
        };

        // ============================================
        // GESTIÓN DE PROYECTOS
        // ============================================
        
        async function cargarProyectosDisponiblesBacklog() {
            try {
                window.showLoading(true);
                
                const response = await fetch('/api/mi-grupo/proyectos');
                if (!response.ok) {
                    throw new Error('Error obteniendo proyectos del grupo');
                }
                
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Error en la respuesta');
                }
                
                backlogState.proyectosDisponibles = data.data.proyectos.map(p => p.nombre);
                
                console.log('Proyectos disponibles para product backlog:', backlogState.proyectosDisponibles);
                renderizarSelectorProyectosBacklog();
                
            } catch (error) {
                console.error('Error cargando proyectos para backlog:', error);
                window.showToast('Error cargando proyectos: ' + error.message, 'error');
                
                // Fallback con proyectos por defecto
                backlogState.proyectosDisponibles = ['GenT', 'Proy'];
                renderizarSelectorProyectosBacklog();
            } finally {
                window.showLoading(false);
            }
        }

        function renderizarSelectorProyectosBacklog() {
            const selector = document.getElementById('backlog-proyecto-selector');
            if (!selector) return;
            
            const proyectosHTML = backlogState.proyectosDisponibles.map(proyecto => {
                const nombre = proyecto === 'GenT' ? 'GenT' : 
                            proyecto === 'Proy' ? 'Proyecto Principal' : 
                            proyecto === 'Proy2' ? 'Proyecto 2' : proyecto;
                const icono = proyecto === 'GenT' ? 
                    'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253' :
                    'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2-2m0 0V5a2 2 0 012-2h14a2 2 0 012 2v2M7 7h10';
                                
                return `
                    <button class="backlog-proyecto-tab bg-white border-2 border-gray-200 rounded-xl p-4 transition-all duration-300 hover:border-green-400 hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50" data-proyecto="${proyecto}">
                        <div class="flex items-center space-x-3">
                            <div class="flex-shrink-0 p-2 bg-gray-100 rounded-lg">
                                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${icono}"></path>
                                </svg>
                            </div>
                            <div class="text-left">
                                <div class="font-semibold text-gray-900">${nombre}</div>
                                <div class="text-sm text-gray-500">Ver backlog</div>
                            </div>
                        </div>
                    </button>
                `;
            }).join('');
            
            selector.innerHTML = proyectosHTML;
        }

        async function seleccionarProyectoBacklog(proyecto) {
            try {
                window.showLoading(true);
                backlogState.selectedProject = proyecto;
                
                console.log('Product Backlog - Proyecto seleccionado:', proyecto);
                
                // Actualizar UI del selector
                document.querySelectorAll('.backlog-proyecto-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-proyecto="${proyecto}"]`)?.classList.add('active');

                // Cargar datos del backlog
                await cargarProductBacklog(proyecto);
                document.getElementById('backlog-proyecto-content').classList.remove('hidden');
                document.getElementById('no-backlog-proyecto-message').classList.add('hidden');
                
            } catch (error) {
                console.error('Error seleccionando proyecto en backlog:', error);
                window.showToast('Error cargando proyecto: ' + error.message, 'error');
            } finally {
                window.showLoading(false);
            }
        }

        // ============================================
        // PRODUCT BACKLOG
        // ============================================
        
        async function cargarProductBacklog(proyecto) {
            try {
                const response = await fetch(`/api/backlog/${proyecto}`);
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Error cargando backlog');
                }

                const historias = data.data || [];
                console.log(`Product Backlog - Historias del proyecto ${proyecto}:`, historias);
                renderizarProductBacklog(historias, proyecto);
                
            } catch (error) {
                console.error('Error cargando product backlog:', error);
                window.showToast('Error cargando backlog: ' + error.message, 'error');
                renderizarProductBacklog([], proyecto);
            }
        }

        function renderizarProductBacklog(historias, proyecto) {
            const container = document.getElementById('backlog-historias');
            const titleContainer = document.getElementById('backlog-proyecto-title');
            const statsContainer = document.getElementById('backlog-stats');
            
            if (!container) return;

            // Actualizar título
            const nombreProyecto = proyecto === 'GenT' ? 'GenT' : 
                                 proyecto === 'Proy' ? 'Proyecto Principal' : 
                                 proyecto === 'Proy2' ? 'Proyecto 2' : proyecto;
            if (titleContainer) {
                titleContainer.textContent = `Product Backlog - ${nombreProyecto}`;
            }

            // Calcular estadísticas
            const totalSP = historias.reduce((sum, h) => sum + (parseInt(h[6]) || 0), 0);
            const completadas = historias.filter(h => h[7] === 'COMPLETADO' || h[7] === 'DONE').length;
            const prioridades = historias.reduce((acc, h) => {
                acc[h[5]] = (acc[h[5]] || 0) + 1;
                return acc;
            }, {});
            
            if (statsContainer) {
                statsContainer.innerHTML = `
                    <div class="backlog-stat">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2"></path>
                        </svg>
                        <span>${historias.length} historias</span>
                    </div>
                    <div class="backlog-stat">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        <span>${totalSP} SP total</span>
                    </div>
                    <div class="backlog-stat">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4"></path>
                        </svg>
                        <span>${completadas} completadas</span>
                    </div>
                    <div class="backlog-stat">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span>Alta: ${prioridades.ALTA || 0}</span>
                    </div>
                `;
            }

            if (historias.length === 0) {
                container.innerHTML = `
                    <div class="backlog-empty-state">
                        <div class="backlog-empty-icon">
                            <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                        </div>
                        <h3 class="backlog-empty-title">No hay historias de usuario</h3>
                        <p class="backlog-empty-description">El product backlog está vacío</p>
                    </div>
                `;
                return;
            }

            // Ordenar por prioridad (Alta -> Media -> Baja)
            const ordenPrioridad = { 'ALTA': 1, 'MEDIA': 2, 'BAJA': 3 };
            const historiasOrdenadas = [...historias].sort((a, b) => {
                return (ordenPrioridad[a[5]] || 4) - (ordenPrioridad[b[5]] || 4);
            });

            const historiasHTML = historiasOrdenadas.map((historia, index) => {
                const [id, titulo, como, quiero, para, prioridad, storyPoints, estado, fechaCreacion, creador] = historia;
                
                return `
                    <div class="backlog-story-card" data-historia-id="${id}" style="animation-delay: ${index * 0.1}s">
                        <div class="backlog-story-header">
                            <div class="backlog-story-id">#${id}</div>
                            <div class="backlog-story-badges">
                                <span class="priority-badge priority-${prioridad.toLowerCase()}">${prioridad}</span>
                                <span class="status-badge status-${estado.toLowerCase().replace('_', '-')}">${estado.replace('_', ' ')}</span>
                            </div>
                        </div>
                        
                        <h4 class="backlog-story-title">${titulo}</h4>
                        
                        <div class="backlog-story-content">
                            <div class="story-section">
                                <div class="story-section-header">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    <span>Como</span>
                                </div>
                                <p class="story-section-content">${como}</p>
                            </div>
                            
                            <div class="story-section">
                                <div class="story-section-header">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                    </svg>
                                    <span>Quiero</span>
                                </div>
                                <p class="story-section-content">${quiero}</p>
                            </div>
                            
                            <div class="story-section">
                                <div class="story-section-header">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span>Para</span>
                                </div>
                                <p class="story-section-content">${para}</p>
                            </div>
                        </div>
                        
                        <div class="backlog-story-footer">
                            <div class="story-points">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                </svg>
                                <span>${storyPoints} Story Points</span>
                            </div>
                            <div class="story-creator">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                <span>por ${creador || 'Desconocido'}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = historiasHTML;
        }

        // ============================================
        // EVENT LISTENERS DEL PRODUCT BACKLOG
        // ============================================
        
        function configurarEventListenersBacklog() {
            // Selección de proyectos
            document.getElementById('backlog-proyecto-selector')?.addEventListener('click', function(e) {
                const boton = e.target.closest('.backlog-proyecto-tab');
                if (boton) {
                    const proyecto = boton.dataset.proyecto;
                    if (proyecto) {
                        seleccionarProyectoBacklog(proyecto);
                    }
                }
            });

            // Atajos de teclado específicos del backlog
            document.addEventListener('keydown', function(e) {
                // Solo actuar si estamos en la sección backlog
                if (window.miembroApp.currentSection !== 'backlog') return;
                
                if (e.altKey && ['1', '2', '3'].includes(e.key)) {
                    e.preventDefault();
                    const proyectoIndex = parseInt(e.key) - 1;
                    if (backlogState.proyectosDisponibles[proyectoIndex]) {
                        seleccionarProyectoBacklog(backlogState.proyectosDisponibles[proyectoIndex]);
                    }
                }
            });
        }

        // ============================================
        // INICIALIZACIÓN DEL PRODUCT BACKLOG
        // ============================================
        
        function inicializarProductBacklog() {
            cargarProyectosDisponiblesBacklog();
            configurarEventListenersBacklog();
        }

        // ============================================
        // GESTIÓN DE EVENTOS GLOBALES
        // ============================================
        
        // Escuchar cambios de sección
        window.addEventListener('sectionChanged', function(e) {
            if (e.detail.section === 'backlog') {
                // Reinicializar backlog cuando se selecciona
                backlogState.selectedProject = null;
                document.getElementById('backlog-proyecto-content').classList.add('hidden');
                document.getElementById('no-backlog-proyecto-message').classList.remove('hidden');
                
                // Limpiar selecciones visuales
                document.querySelectorAll('.backlog-proyecto-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
            }
        });

        // Inicializar
        inicializarProductBacklog();
        
        console.log('✅ Product Backlog inicializado correctamente');
    }
});
</script>

<style>
    /* ============================================
       ESTILOS ESPECÍFICOS DEL PRODUCT BACKLOG
       ============================================ */

    .backlog-proyecto-tab {
        @apply cursor-pointer transition-all duration-300;
    }
    
    .backlog-proyecto-tab.active {
        @apply border-green-500 bg-green-100 shadow-lg;
    }
    
    .backlog-proyecto-tab.active .flex-shrink-0 {
        @apply bg-green-200;
    }
    
    .backlog-proyecto-tab.active svg {
        @apply text-green-600;
    }

    /* ============================================
       PRODUCT BACKLOG STYLES - Vista específica
       ============================================ */

    #backlog-historias {
        @apply grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6;
    }

    .backlog-story-card {
        @apply bg-white rounded-xl border-2 border-gray-100 p-6 shadow-sm transition-all duration-300;
        background: linear-gradient(135deg, #ffffff 0%, #fafbfc 100%);
        cursor: pointer;
    }

    .backlog-story-card:hover {
        @apply border-gray-300 shadow-lg;
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .backlog-story-header {
        @apply flex justify-between items-start mb-4;
    }

    .backlog-story-id {
        @apply text-xs font-mono bg-gray-100 text-gray-600 px-2 py-1 rounded-md;
    }

    .backlog-story-badges {
        @apply flex space-x-2;
    }

    .backlog-story-title {
        @apply text-lg font-bold text-gray-900 mb-4 leading-tight;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .backlog-story-content {
        @apply space-y-4 mb-6;
    }

    .story-section {
        @apply bg-gray-50 rounded-lg p-3 border-l-4;
    }

    .story-section:nth-child(1) {
        @apply border-blue-400;
    }

    .story-section:nth-child(2) {
        @apply border-green-400;
    }

    .story-section:nth-child(3) {
        @apply border-purple-400;
    }

    .story-section-header {
        @apply flex items-center space-x-2 mb-2 text-sm font-semibold text-gray-700;
    }

    .story-section-header svg {
        @apply text-gray-500;
    }

    .story-section-content {
        @apply text-sm text-gray-600 leading-relaxed;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .backlog-story-footer {
        @apply flex justify-between items-center pt-4 border-t border-gray-100;
    }

    .story-points {
        @apply flex items-center space-x-1 text-sm font-semibold text-indigo-600;
    }

    .story-creator {
        @apply flex items-center space-x-1 text-xs text-gray-500;
    }

    /* ============================================
       STATISTICS SECTION
       ============================================ */

    .backlog-stat {
        @apply flex items-center space-x-1 text-sm text-gray-600 bg-gray-50 px-3 py-1 rounded-full;
    }

    /* ============================================
       EMPTY STATES - Backlog específico
       ============================================ */

    .backlog-empty-state {
        @apply col-span-full text-center py-16;
    }

    .backlog-empty-icon {
        @apply mx-auto mb-6 p-4 bg-gray-100 rounded-full w-20 h-20 flex items-center justify-center;
    }

    .backlog-empty-title {
        @apply text-xl font-semibold text-gray-900 mb-3;
    }

    .backlog-empty-description {
        @apply text-gray-500 text-lg;
    }

    /* ============================================
       ANIMATIONS
       ============================================ */

    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .backlog-story-card {
        animation: slideInUp 0.3s ease-out forwards;
    }

    /* ============================================
       ACCESSIBILITY IMPROVEMENTS
       ============================================ */

    .backlog-story-card:focus,
    .backlog-proyecto-tab:focus {
        @apply outline-none ring-2 ring-green-500 ring-opacity-50;
    }

    .backlog-story-card:focus-visible {
        @apply outline-2 outline-green-500;
    }

    /* Selector containers */
    #backlog-proyecto-selector {
        @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
    }

    /* ============================================
       RESPONSIVE MEJORAS ESPECÍFICAS
       ============================================ */

    @media (max-width: 768px) {
        .backlog-story-card {
            @apply p-4;
        }
        
        .backlog-story-title {
            @apply text-base;
        }
        
        .story-section {
            @apply p-2;
        }
        
        .story-section-content {
            -webkit-line-clamp: 2;
        }

        .backlog-proyecto-tab {
            @apply text-sm;
        }
    }

    @media (max-width: 640px) {
        #backlog-historias {
            @apply grid-cols-1 gap-4;
        }
        
        .backlog-story-footer {
            @apply flex-col space-y-2 items-start;
        }
    }
</style>