<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Miembro - DARDITO</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <!-- Navigation Header -->
    <nav class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-semibold text-gray-900">DARDITO - <%= grupo %></h1>
                </div>
                <div class="flex items-center space-x-4">
                    <span class="text-sm text-gray-600"><%= user.nickname %></span>
                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium">Miembro</span>
                    <a href="/logout" class="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-md text-sm font-medium">
                        Cerrar Sesión
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Tabs de Navegación entre Proyectos -->
    <div class="bg-white border-b border-gray-200">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mb-px flex space-x-8">
            <% if (datos.GenT) { %>
            <button onclick="cambiarProyecto('gent')" id="tab-gent" 
                    class="tab-button py-2 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600">
                Generación T
            </button>
            <% } %>
            <% if (datos.Proy) { %>
            <button onclick="cambiarProyecto('proy')" id="tab-proy" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Proyecto Principal
            </button>
            <% } %>
            <% if (datos.Proy2) { %>
            <button onclick="cambiarProyecto('proy2')" id="tab-proy2" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Proyecto Secundario
            </button>
            <% } %>
        </nav>
    </div>

    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <!-- Contenido de cada Proyecto -->
        <% ['GenT', 'Proy', 'Proy2'].forEach(proyecto => { %>
        <% if (datos[proyecto]) { %>
        <div id="content-<%= proyecto.toLowerCase() %>" class="proyecto-content <%= proyecto === 'GenT' ? '' : 'hidden' %>">
            
            <!-- Navegación entre Sprints -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Navegación de Sprints</h3>
                <div class="flex space-x-2 mb-4">
                    <button onclick="cargarSprint('<%= proyecto.toLowerCase() %>', '1')" 
                            class="sprint-btn bg-blue-600 text-white px-4 py-2 rounded text-sm" data-sprint="1">
                        Sprint 1
                    </button>
                    <!-- Más sprints se cargarán dinámicamente -->
                </div>
                <div class="text-sm text-gray-600">
                    Sprint Actual: <span id="sprint-actual-<%= proyecto.toLowerCase() %>" class="font-medium">1</span>
                    | Estado: <span id="estado-sprint-<%= proyecto.toLowerCase() %>" class="font-medium">Activo</span>
                    | Fechas: <span id="fechas-sprint-<%= proyecto.toLowerCase() %>">--/--/---- - --/--/----</span>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                
                <!-- Product Backlog (Solo Lectura) -->
                <div class="bg-white rounded-lg shadow">
                    <div class="px-6 py-4 border-b">
                        <h3 class="text-lg font-medium text-gray-900">
                            Product Backlog
                        </h3>
                        <p class="text-sm text-gray-500">Todas las historias de usuario del proyecto</p>
                    </div>
                    <div class="p-4">
                        <div id="product-backlog-<%= proyecto.toLowerCase() %>" class="space-y-3 max-h-96 overflow-y-auto">
                            <!-- Historias del backlog -->
                        </div>
                    </div>
                </div>

                <!-- Historias y Tareas del Sprint Actual -->
                <div class="bg-white rounded-lg shadow">
                    <div class="px-6 py-4 border-b">
                        <h3 class="text-lg font-medium text-gray-900">
                            Sprint Actual - HUs y Tareas
                        </h3>
                        <p class="text-sm text-gray-500">Historias seleccionadas y sus tareas técnicas</p>
                    </div>
                    <div class="p-4">
                        <div id="sprint-content-<%= proyecto.toLowerCase() %>" class="space-y-4 max-h-96 overflow-y-auto">
                            <!-- Historias del sprint con sus tareas -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <% } %>
        <% }) %>
    </div>

    <script>
        let proyectoActual = '<%= datos.GenT ? "gent" : datos.Proy ? "proy" : "proy2" %>';
        let sprintActual = '1';

        // Función para cambiar de proyecto
        function cambiarProyecto(proyecto) {
            // Ocultar contenido actual
            document.querySelectorAll('.proyecto-content').forEach(el => el.classList.add('hidden'));
            document.querySelectorAll('.tab-button').forEach(el => {
                el.classList.remove('border-blue-500', 'text-blue-600');
                el.classList.add('border-transparent', 'text-gray-500');
            });

            // Mostrar nuevo contenido
            document.getElementById(`content-${proyecto}`).classList.remove('hidden');
            document.getElementById(`tab-${proyecto}`).classList.add('border-blue-500', 'text-blue-600');
            document.getElementById(`tab-${proyecto}`).classList.remove('border-transparent', 'text-gray-500');

            proyectoActual = proyecto;
            sprintActual = '1';

            // Cargar datos del proyecto
            cargarDatosProyecto(proyecto);
        }

        // Función para cargar datos del proyecto
        async function cargarDatosProyecto(proyecto) {
            try {
                // Cargar Product Backlog
                const backlogResponse = await fetch(`/api/product-backlog/<%= grupo %>/${proyecto.toUpperCase()}`);
                const backlogData = await backlogResponse.json();
                mostrarProductBacklog(proyecto, backlogData.productBacklog || []);

                // Cargar Sprint
                await cargarSprint(proyecto, sprintActual);

            } catch (error) {
                console.error('Error cargando proyecto:', error);
                mostrarError('Error al cargar los datos del proyecto');
            }
        }

        // Función para cargar sprint específico
        async function cargarSprint(proyecto, numeroSprint) {
            try {
                const [sprintResponse, tareasResponse] = await Promise.all([
                    fetch(`/api/sprint/<%= grupo %>/${proyecto.toUpperCase()}/${numeroSprint}`),
                    fetch(`/api/tareas/<%= grupo %>/${proyecto.toUpperCase()}/${numeroSprint}`)
                ]);

                const sprintData = await sprintResponse.json();
                const tareasData = await tareasResponse.json();

                // Actualizar información del sprint
                document.getElementById(`sprint-actual-${proyecto}`).textContent = numeroSprint;
                if (sprintData.fechaIni && sprintData.fechaFin) {
                    document.getElementById(`fechas-sprint-${proyecto}`).textContent = 
                        `${sprintData.fechaIni.join('/')} - ${sprintData.fechaFin.join('/')}`;
                }

                // Mostrar historias y tareas del sprint
                mostrarSprintContenido(proyecto, sprintData, tareasData.tareas || {});

                sprintActual = numeroSprint;

            } catch (error) {
                console.error('Error cargando sprint:', error);
                mostrarError('Error al cargar el sprint');
            }
        }

        // Función para mostrar Product Backlog
        function mostrarProductBacklog(proyecto, historias) {
            const container = document.getElementById(`product-backlog-${proyecto}`);
            container.innerHTML = '';

            if (historias.length > 0) {
                historias.forEach((historia, index) => {
                    const div = document.createElement('div');
                    div.className = 'border border-gray-200 rounded-lg p-3 hover:bg-gray-50';
                    
                    const estadoColor = {
                        'POR_HACER': 'bg-gray-100 text-gray-800',
                        'EN_PROCESO': 'bg-blue-100 text-blue-800',
                        'EN_SPRINT': 'bg-purple-100 text-purple-800',
                        'COMPLETADO': 'bg-green-100 text-green-800'
                    };

                    div.innerHTML = `
                        <div class="flex justify-between items-start mb-2">
                            <div class="text-sm font-medium text-gray-900 flex-1">
                                <span class="text-gray-400 text-xs">#${historia[0] || index + 1}</span>
                                Como <strong>${historia[2] || historia[1]}</strong>, quiero <strong>${historia[3] || historia[2]}</strong>
                            </div>
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${estadoColor[historia[7]] || 'bg-gray-100 text-gray-800'}">
                                ${(historia[7] || 'POR_HACER').replace('_', ' ')}
                            </span>
                        </div>
                        <div class="text-xs text-gray-600">
                            <strong>Para:</strong> ${historia[4] || historia[3]}
                        </div>
                        <div class="flex justify-between items-center mt-2">
                            <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                ${historia[6] || historia[1]} Story Points
                            </span>
                            <span class="text-xs ${
                                (historia[5] || 'MEDIA') === 'ALTA' ? 'text-red-600' :
                                (historia[5] || 'MEDIA') === 'MEDIA' ? 'text-yellow-600' :
                                'text-green-600'
                            }">
                                Prioridad: ${historia[5] || 'MEDIA'}
                            </span>
                        </div>
                    `;
                    container.appendChild(div);
                });
            } else {
                container.innerHTML = '<div class="text-center text-gray-500 py-8">No hay historias en el Product Backlog</div>';
            }
        }

        // Función para mostrar contenido del sprint (Historias + Tareas)
        function mostrarSprintContenido(proyecto, sprintData, tareas) {
            const container = document.getElementById(`sprint-content-${proyecto}`);
            container.innerHTML = '';

            if (sprintData.scrumBoard && sprintData.scrumBoard.length > 0) {
                // Para cada historia en el sprint, mostrar sus tareas
                sprintData.scrumBoard.forEach(historyId => {
                    const historiaDiv = document.createElement('div');
                    historiaDiv.className = 'border-l-4 border-blue-500 bg-blue-50 p-4 rounded-r-lg mb-4';
                    
                    // Encontrar tareas de esta historia
                    const tareasDeHistoria = [];
                    if (sprintData.scrumBoard[historyId]) {
                        sprintData.scrumBoard[historyId].forEach(taskId => {
                            if (tareas[taskId]) {
                                tareasDeHistoria.push({ id: taskId, data: tareas[taskId] });
                            }
                        });
                    }

                    historiaDiv.innerHTML = `
                        <div class="mb-3">
                            <h4 class="font-medium text-blue-900 mb-1">
                                Historia de Usuario #${historyId}
                            </h4>
                            <div class="text-sm text-blue-700">
                                ${tareasDeHistoria.length} tarea${tareasDeHistoria.length !== 1 ? 's' : ''} técnica${tareasDeHistoria.length !== 1 ? 's' : ''}
                            </div>
                        </div>
                        <div id="tareas-historia-${historyId}" class="space-y-2">
                            <!-- Tareas de esta historia -->
                        </div>
                    `;

                    container.appendChild(historiaDiv);

                    // Mostrar tareas de esta historia
                    const tareasContainer = document.getElementById(`tareas-historia-${historyId}`);
                    if (tareasDeHistoria.length > 0) {
                        tareasDeHistoria.forEach(({ id, data }) => {
                            const tareaDiv = document.createElement('div');
                            tareaDiv.className = 'bg-white border rounded p-3 ml-4';
                            
                            const estadoColor = {
                                'POR_HACER': 'bg-gray-100 text-gray-800',
                                'EN_PROCESO': 'bg-yellow-100 text-yellow-800',
                                'COMPLETADO': 'bg-green-100 text-green-800',
                                'VERIFICADO': 'bg-green-200 text-green-900'
                            };

                            tareaDiv.innerHTML = `
                                <div class="flex justify-between items-start">
                                    <div class="flex-1">
                                        <div class="text-sm font-medium text-gray-900">${data[1]}</div>
                                        <div class="text-xs text-gray-600 mt-1">
                                            Asignado a: ${data[2] ? data[2].join(', ') : 'Sin asignar'}
                                            ${data[3] ? ` | Prioridad: ${data[3]}` : ''}
                                        </div>
                                    </div>
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${estadoColor[data[0]] || 'bg-gray-100 text-gray-800'}">
                                        ${data[0].replace('_', ' ')}
                                    </span>
                                </div>
                            `;
                            
                            tareasContainer.appendChild(tareaDiv);
                        });
                    } else {
                        tareasContainer.innerHTML = '<div class="text-center text-gray-500 text-sm py-2 ml-4">No hay tareas técnicas para esta historia</div>';
                    }
                });

            } else {
                container.innerHTML = '<div class="text-center text-gray-500 py-8">🏃‍♂️ No hay historias seleccionadas para este sprint</div>';
            }
        }

        // Función para mostrar errores
        function mostrarError(mensaje) {
            const div = document.createElement('div');
            div.className = 'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded shadow-lg z-50';
            div.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">❌</span>
                    <span>${mensaje}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-red-700 hover:text-red-900">✕</button>
                </div>
            `;
            document.body.appendChild(div);
            setTimeout(() => div.remove(), 5000);
        }

        // Inicialización
        document.addEventListener('DOMContentLoaded', () => {
            cargarDatosProyecto(proyectoActual);
        });
    </script>
</body>
</html>