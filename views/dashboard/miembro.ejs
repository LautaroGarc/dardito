<%- include('../partials/header.ejs') %>

<%- include('../partials/navigation.ejs') %>

<div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <!-- Contenedor principal din√°mico -->
    <div id="main-content" class="transition-all duration-300">
        <!-- El contenido se carga din√°micamente aqu√≠ -->
        <div class="text-center py-12">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
            <p class="text-gray-600">Cargando dashboard...</p>
        </div>
    </div>
</div>

<%- include('../partials/footer.ejs') %>

<!-- Toast container para notificaciones -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('üë§ Inicializando dashboard de miembro...');
    
    // ============================================
    // CONFIGURACI√ìN ESPEC√çFICA DE MIEMBRO
    // ============================================
    
    const miembroConfig = {
        user: <%- typeof user !== 'undefined' ? JSON.stringify(user) : '{}' %>,
        dashboardData: <%- typeof proyectos !== 'undefined' ? JSON.stringify({ proyectos: proyectos }) : '{}' %>,
        defaultSection: 'dashboard',
        availableSections: ['dashboard', 'backlog']
    };
    
    // Hacer datos globalmente accesibles
    window.miembroData = miembroConfig;
    
    console.log('Usuario miembro:', miembroConfig.user);
    console.log('Proyectos disponibles:', miembroConfig.dashboardData);

    // ============================================
    // FUNCIONES DE UTILIDAD PARA MIEMBRO
    // ============================================
    
    function showToast(message, type = 'info') {
        const container = document.getElementById('toastContainer');
        if (!container) return;

        const toastId = 'toast-' + Date.now();
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = `toast toast-${type} transform translate-x-full transition-transform duration-300`;
        
        const iconos = {
            success: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
            error: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
            warning: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
            info: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
        };
        
        toast.innerHTML = `
            <div class="flex items-center justify-between min-w-[300px] max-w-[500px] p-4 rounded-lg shadow-lg text-white font-medium">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        ${iconos[type] || iconos.info}
                    </svg>
                    <span>${message}</span>
                </div>
                <button onclick="removeToast('${toastId}')" class="ml-4 hover:text-gray-200 focus:outline-none">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;

        container.appendChild(toast);
        
        // Animar entrada
        setTimeout(() => {
            toast.classList.remove('translate-x-full');
            toast.classList.add('translate-x-0');
        }, 100);

        // Auto-remover despu√©s de 5 segundos
        setTimeout(() => {
            removeToast(toastId);
        }, 5000);
    }

    function removeToast(toastId) {
        const toast = document.getElementById(toastId);
        if (toast) {
            toast.classList.remove('translate-x-0');
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }
    }

    // Hacer funciones disponibles globalmente
    window.showToast = showToast;
    window.removeToast = removeToast;

    // ============================================
    // INTEGRACI√ìN CON SISTEMA DE NAVEGACI√ìN
    // ============================================
    
    // Esperar a que el sistema de navegaci√≥n est√© listo
    window.addEventListener('navigationReady', function(e) {
        console.log('üß≠ Sistema de navegaci√≥n listo para miembro');
        
        // Cargar dashboard por defecto
        setTimeout(() => {
            e.detail.manager.loadDashboard();
        }, 100);
    });

    // Escuchar cambios de contenido para inicializar componentes espec√≠ficos
    window.addEventListener('navigationContentLoaded', function(e) {
        const section = e.detail.section;
        const container = e.detail.container;
        
        console.log(`üìÑ Contenido cargado para secci√≥n: ${section}`);
        
        // Inicializar componentes espec√≠ficos seg√∫n la secci√≥n
        switch(section) {
            case 'dashboard':
                initializeDashboardComponents(container);
                break;
            case 'backlog':
                initializeBacklogComponents(container);
                break;
            default:
                console.warn(`Secci√≥n no reconocida para miembro: ${section}`);
        }
        
        // Mostrar notificaci√≥n de carga exitosa
        showToast(`${section.charAt(0).toUpperCase() + section.slice(1)} cargado correctamente`, 'success');
    });

    // ============================================
    // INICIALIZACI√ìN DE COMPONENTES ESPEC√çFICOS
    // ============================================
    
    function initializeDashboardComponents(container) {
        console.log('üéØ Inicializando componentes del dashboard...');
        
        // Buscar y configurar selectores de proyecto
        const proyectoSelector = container.querySelector('#dashboard-proyecto-selector');
        if (proyectoSelector) {
            setupProjectSelector(proyectoSelector);
        }
        
        // Configurar actualizaciones de estado de tareas
        const estadoSelects = container.querySelectorAll('.dashboard-estado-select');
        estadoSelects.forEach(select => {
            setupTaskStatusHandler(select);
        });
        
        // Configurar auto-refresh del scrumboard
        setupDashboardAutoRefresh();
        
        console.log('‚úÖ Componentes del dashboard inicializados');
    }
    
    function initializeBacklogComponents(container) {
        console.log('üìã Inicializando componentes del backlog...');
        
        // Configurar filtros del backlog
        const filtros = container.querySelectorAll('.backlog-filter');
        filtros.forEach(filtro => {
            setupBacklogFilter(filtro);
        });
        
        // Configurar drag & drop si est√° disponible
        if (container.querySelector('.backlog-story-list')) {
            setupBacklogDragDrop(container);
        }
        
        console.log('‚úÖ Componentes del backlog inicializados');
    }

    // ============================================
    // HANDLERS ESPEC√çFICOS
    // ============================================
    
    function setupProjectSelector(selector) {
        selector.addEventListener('click', function(e) {
            const projectTab = e.target.closest('.dashboard-proyecto-tab');
            if (projectTab) {
                const proyecto = projectTab.dataset.proyecto;
                console.log(`üè∑Ô∏è Proyecto seleccionado: ${proyecto}`);
                
                // Actualizar estado visual
                selector.querySelectorAll('.dashboard-proyecto-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                projectTab.classList.add('active');
                
                // Disparar evento personalizado
                window.dispatchEvent(new CustomEvent('projectSelected', {
                    detail: { proyecto: proyecto }
                }));
            }
        });
    }
    
    function setupTaskStatusHandler(select) {
        select.addEventListener('change', async function(e) {
            const tareaId = this.dataset.tareaId;
            const nuevoEstado = this.value;
            const estadoAnterior = this.dataset.originalValue;
            
            console.log(`üîÑ Actualizando tarea ${tareaId}: ${estadoAnterior} ‚Üí ${nuevoEstado}`);
            
            // Confirmaci√≥n para completar tareas
            if (nuevoEstado === 'COMPLETADO' && estadoAnterior !== 'COMPLETADO') {
                if (!confirm('¬øMarcar esta tarea como completada?')) {
                    this.value = estadoAnterior;
                    return;
                }
            }
            
            try {
                // Deshabilitar selector mientras se actualiza
                this.disabled = true;
                
                // Simular llamada API (reemplazar con la real)
                await updateTaskStatus(tareaId, nuevoEstado);
                
                // Actualizar valor original
                this.dataset.originalValue = nuevoEstado;
                
                showToast('Estado de tarea actualizado', 'success');
                
            } catch (error) {
                console.error('Error actualizando tarea:', error);
                showToast('Error actualizando tarea: ' + error.message, 'error');
                
                // Revertir cambio
                this.value = estadoAnterior;
            } finally {
                this.disabled = false;
            }
        });
    }
    
    function setupBacklogFilter(filtro) {
        filtro.addEventListener('change', function(e) {
            const filterValue = this.value;
            console.log(`üîç Aplicando filtro de backlog: ${filterValue}`);
            
            // Aplicar filtro a las historias
            const historias = document.querySelectorAll('.backlog-story-card');
            historias.forEach(historia => {
                const shouldShow = filterValue === 'all' || 
                                  historia.dataset.estado === filterValue ||
                                  historia.dataset.prioridad === filterValue;
                
                historia.style.display = shouldShow ? 'block' : 'none';
            });
        });
    }
    
    function setupBacklogDragDrop(container) {
        // Implementar drag & drop b√°sico
        console.log('üé≠ Configurando drag & drop del backlog');
        // Implementaci√≥n espec√≠fica seg√∫n necesidades
    }
    
    function setupDashboardAutoRefresh() {
        // Auto-refresh cada 30 segundos cuando se est√° en dashboard
        const refreshInterval = setInterval(() => {
            if (window.navigationManager && 
                window.navigationManager.getCurrentSection() === 'dashboard' &&
                !window.navigationManager.isLoading()) {
                
                console.log('üîÑ Auto-refresh del dashboard');
                // Actualizar solo datos espec√≠ficos sin recargar toda la p√°gina
                refreshDashboardData();
            }
        }, 30000);
        
        // Limpiar interval cuando se cambie de p√°gina
        window.addEventListener('beforeunload', () => {
            clearInterval(refreshInterval);
        });
    }

    // ============================================
    // FUNCIONES API (Simuladas - reemplazar con reales)
    // ============================================
    
    async function updateTaskStatus(tareaId, estado) {
        // Simular delay de red
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Aqu√≠ ir√≠a la llamada real a la API
        console.log(`API Call: Updating task ${tareaId} to ${estado}`);
        
        // Simular posible error (descomenta para probar)
        // if (Math.random() < 0.1) throw new Error('Error de red simulado');
        
        return { success: true };
    }
    
    async function refreshDashboardData() {
        try {
            // Simular llamada para obtener datos actualizados
            console.log('üìä Actualizando datos del dashboard...');
            
            // Aqu√≠ ir√≠an las llamadas reales a la API para obtener datos frescos
            
        } catch (error) {
            console.error('Error en auto-refresh:', error);
        }
    }

    // ============================================
    // ATAJOS DE TECLADO ESPEC√çFICOS DE MIEMBRO
    // ============================================
    
    document.addEventListener('keydown', function(e) {
        // Solo actuar si no se est√° escribiendo en un input
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
        
        if (e.ctrlKey || e.metaKey) {
            switch(e.key.toLowerCase()) {
                case '1':
                    e.preventDefault();
                    window.navigationManager?.loadDashboard();
                    break;
                case '2':
                    e.preventDefault();
                    window.navigationManager?.loadBacklog();
                    break;
                case 'r':
                    e.preventDefault();
                    window.navigationManager?.reloadCurrentSection();
                    showToast('Recargando contenido...', 'info');
                    break;
            }
        }
    });

    // ============================================
    // INICIALIZACI√ìN FINAL
    // ============================================
    
    // Notificar que el dashboard de miembro est√° listo
    window.dispatchEvent(new CustomEvent('miembroDashboardReady', {
        detail: { 
            user: miembroConfig.user,
            availableSections: miembroConfig.availableSections
        }
    }));
    
    console.log('‚úÖ Dashboard de miembro inicializado correctamente');
});
</script>

<style>
    /* ============================================
       ESTILOS ESPEC√çFICOS DEL MIEMBRO
       ============================================ */
    
    /* Transiciones suaves para el contenido principal */
    #main-content {
        min-height: 400px;
        transition: all 0.3s ease;
    }
    
    /* Toast notifications espec√≠ficos */
    .toast {
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
    }
    
    .toast-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }
    
    .toast-error {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }
    
    .toast-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }
    
    .toast-info {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    }
    
    /* Indicadores de estado para tareas */
    .dashboard-tarea-card.asignada {
        border-left: 4px solid #3b82f6;
        background: linear-gradient(to right, #eff6ff, #ffffff);
    }
    
    .dashboard-tarea-card:not(.asignada) {
        opacity: 0.7;
    }
    
    /* Estados de carga espec√≠ficos */
    .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading-shimmer 1.5s infinite;
    }
    
    @keyframes loading-shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }
    
    /* Mejoras visuales para el contenido din√°mico */
    .fade-in-content {
        animation: fadeInContent 0.5s ease-out;
    }
    
    @keyframes fadeInContent {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Personalizaci√≥n del scrumboard para miembro */
    .scrumboard-story-card.assigned-to-me {
        border: 2px solid #3b82f6;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    }
    
    .scrumboard-story-card.assigned-to-me::before {
        content: "Asignada a ti";
        position: absolute;
        top: -8px;
        right: 8px;
        background: #3b82f6;
        color: white;
        font-size: 0.75rem;
        padding: 2px 8px;
        border-radius: 12px;
        font-weight: 500;
    }
    
    /* Mejoras de accesibilidad */
    .nav-link:focus-visible {
        outline: 2px solid #3b82f6;
        outline-offset: 2px;
    }
    
    /* Atajos de teclado visibles */
    .keyboard-shortcut-hint {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.75rem;
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1000;
    }
    
    .keyboard-shortcut-hint.visible {
        opacity: 1;
    }
    
    /* Responsivo espec√≠fico para miembro */
    @media (max-width: 768px) {
        #main-content {
            min-height: 300px;
        }
        
        .dashboard-tarea-card {
            padding: 1rem;
            margin-bottom: 0.75rem;
        }
        
        .toast {
            min-width: 280px;
            max-width: calc(100vw - 2rem);
        }
    }
</style>

<!-- Indicador de atajos de teclado (oculto por defecto) -->
<div id="keyboardHint" class="keyboard-shortcut-hint">
    <div class="text-xs font-medium mb-1">Atajos disponibles:</div>
    <div class="text-xs space-y-1">
        <div><kbd class="bg-gray-700 px-1 rounded">Ctrl+1</kbd> Dashboard</div>
        <div><kbd class="bg-gray-700 px-1 rounded">Ctrl+2</kbd> Product Backlog</div>
        <div><kbd class="bg-gray-700 px-1 rounded">Ctrl+R</kbd> Recargar</div>
    </div>
</div>