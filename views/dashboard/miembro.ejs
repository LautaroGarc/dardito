<%- include('../partials/header.ejs') %>

<%- include('../partials/navigation.ejs') %>

<div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <!-- Contenedor principal del dashboard -->
    <div id="main-content" class="fade-in">
        <!-- Dashboard por defecto -->
        <div id="dashboard-content">
            <!-- Header con bienvenida -->
            <div class="bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg p-6 mb-6 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-2xl font-bold">¡Hola, <%= user.nickname %>!</h1>
                        <p class="text-blue-100 mt-1">Bienvenido a tu dashboard de miembro del <%= user.grupo %></p>
                    </div>
                    <div class="hidden md:block">
                        <div class="bg-white bg-opacity-20 rounded-lg p-4">
                            <div class="text-sm font-medium">Tu rol</div>
                            <div class="text-2xl font-bold">Miembro</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Selector de proyectos -->
            <div class="mb-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Seleccionar Proyecto</h2>
                <div id="proyecto-selector" class="flex flex-wrap gap-3">
                    <!-- Los proyectos se cargarán dinámicamente -->
                </div>
            </div>

            <!-- Contenido del proyecto seleccionado -->
            <div id="proyecto-content" class="hidden">
                <!-- Selector de sprints -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-3">Sprints</h3>
                    <div id="sprint-selector" class="flex flex-wrap gap-2">
                        <!-- Los sprints se cargarán dinámicamente -->
                    </div>
                </div>

                <!-- Scrumboard -->
                <div id="scrumboard-container" class="mb-8">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Scrumboard</h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Por Hacer -->
                        <div class="scrumboard-column">
                            <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                                <div class="w-3 h-3 bg-gray-400 rounded-full mr-2"></div>
                                Por Hacer
                                <span id="count-por-hacer" class="ml-2 bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full">0</span>
                            </h4>
                            <div id="historias-por-hacer" class="space-y-3">
                                <!-- Historias se cargarán aquí -->
                            </div>
                        </div>

                        <!-- En Proceso -->
                        <div class="scrumboard-column">
                            <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                                <div class="w-3 h-3 bg-blue-400 rounded-full mr-2"></div>
                                En Proceso
                                <span id="count-en-proceso" class="ml-2 bg-blue-200 text-blue-700 text-xs px-2 py-1 rounded-full">0</span>
                            </h4>
                            <div id="historias-en-proceso" class="space-y-3">
                                <!-- Historias se cargarán aquí -->
                            </div>
                        </div>

                        <!-- Completado -->
                        <div class="scrumboard-column">
                            <h4 class="font-medium text-gray-900 mb-3 flex items-center">
                                <div class="w-3 h-3 bg-green-400 rounded-full mr-2"></div>
                                Completado
                                <span id="count-completado" class="ml-2 bg-green-200 text-green-700 text-xs px-2 py-1 rounded-full">0</span>
                            </h4>
                            <div id="historias-completado" class="space-y-3">
                                <!-- Historias se cargarán aquí -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Lista de tareas -->
                <div id="tareas-container">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Tareas del Sprint</h3>
                    <div id="tareas-list" class="space-y-3">
                        <!-- Las tareas se cargarán aquí -->
                    </div>
                </div>
            </div>

            <!-- Mensaje cuando no hay proyecto seleccionado -->
            <div id="no-proyecto-message" class="text-center py-12">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2-2m0 0V5a2 2 0 012-2h14a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Selecciona un proyecto</h3>
                <p class="text-gray-500">Elige un proyecto para ver el scrumboard y tus tareas</p>
            </div>
        </div>

        <!-- Product Backlog content (oculto por defecto) -->
        <div id="backlog-content" class="hidden">
            <!-- Header del backlog -->
            <div class="bg-gradient-to-r from-green-600 to-teal-600 rounded-lg p-6 mb-6 text-white">
                <h2 class="text-2xl font-bold">Product Backlog</h2>
                <p class="text-green-100 mt-1">Historias de usuario de los proyectos</p>
            </div>

            <!-- Selector de proyectos para backlog -->
            <div class="mb-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Seleccionar Proyecto</h3>
                <div id="backlog-proyecto-selector" class="flex flex-wrap gap-3">
                    <!-- Los proyectos se cargarán dinámicamente -->
                </div>
            </div>

            <!-- Contenido del backlog -->
            <div id="backlog-proyecto-content" class="hidden">
                <div class="mb-4 flex justify-between items-center">
                    <h4 id="backlog-proyecto-title" class="text-lg font-medium text-gray-900"></h4>
                    <div id="backlog-stats" class="flex space-x-4 text-sm text-gray-600">
                        <!-- Estadísticas del backlog -->
                    </div>
                </div>
                <div id="backlog-historias" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Las historias se cargarán aquí -->
                </div>
            </div>

            <!-- Mensaje cuando no hay proyecto seleccionado en backlog -->
            <div id="no-backlog-proyecto-message" class="text-center py-12">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Selecciona un proyecto</h3>
                <p class="text-gray-500">Elige un proyecto para ver su Product Backlog</p>
            </div>
        </div>
    </div>
</div>

<%- include('../partials/footer.ejs') %>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // ============================================
    // VARIABLES GLOBALES
    // ============================================

    let currentSection = 'dashboard';
    let selectedProject = null;
    let selectedSprint = null;
    let proyectosDisponibles = [];
    let sprintsDisponibles = [];
    let currentUser = <%- typeof user !== 'undefined' ? JSON.stringify(user) : '{}' %>;
    let dashboardData = <%- typeof proyectos !== 'undefined' ? JSON.stringify({ proyectos: proyectos }) : '{}' %>;
    
    // Parsear los datos
    try {
        currentUser = typeof currentUser === 'string' ? JSON.parse(currentUser) : currentUser;
        dashboardData = typeof dashboardData === 'string' ? JSON.parse(dashboardData) : dashboardData;
    } catch (e) {
        console.error('Error parseando datos:', e);
        currentUser = {};
        dashboardData = {};
    }

    console.log('Usuario actual:', currentUser);
    console.log('Dashboard data:', dashboardData);

    // ============================================
    // INICIALIZACIÓN
    // ============================================
    
    function inicializar() {
        cargarProyectosDisponibles();
        configurarEventListeners();
        mostrarSeccionDashboard();
    }

    // ============================================
    // GESTIÓN DE PROYECTOS
    // ============================================
    
    async function cargarProyectosDisponibles() {
        try {
            showLoading(true);
            
            const response = await fetch('/api/mi-grupo/proyectos');
            if (!response.ok) {
                throw new Error('Error obteniendo proyectos del grupo');
            }
            
            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Error en la respuesta');
            }
            
            proyectosDisponibles = data.data.proyectos.map(p => p.nombre);
            
            console.log('Proyectos disponibles para el grupo:', proyectosDisponibles);
            renderizarSelectorProyectos();
            
        } catch (error) {
            console.error('Error cargando proyectos:', error);
            showToast('Error cargando proyectos: ' + error.message, 'error');
            
            proyectosDisponibles = ['GenT', 'Proy'];
            renderizarSelectorProyectos();
        } finally {
            showLoading(false);
        }
    }

    function renderizarSelectorProyectos() {
        const dashboardSelector = document.getElementById('proyecto-selector');
        const backlogSelector = document.getElementById('backlog-proyecto-selector');
        
        const proyectosHTML = proyectosDisponibles.map(proyecto => {
            const nombre = proyecto === 'GenT' ? 'GenT' : 
                        proyecto === 'Proy' ? 'Proyecto Principal' : 
                        proyecto === 'Proy2' ? 'Proyecto 2' : proyecto;
            const icono = proyecto === 'GenT' ? 
                'M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253' :
                'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2-2m0 0V5a2 2 0 012-2h14a2 2 0 012 2v2M7 7h10';
                            
            return `
                <button class="proyecto-tab bg-white border-2 border-gray-200 rounded-xl p-4 transition-all duration-300 hover:border-blue-400 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" data-proyecto="${proyecto}">
                    <div class="flex items-center space-x-3">
                        <div class="flex-shrink-0 p-2 bg-gray-100 rounded-lg">
                            <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${icono}"></path>
                            </svg>
                        </div>
                        <div class="text-left">
                            <div class="font-semibold text-gray-900">${nombre}</div>
                            <div class="text-sm text-gray-500">Proyecto activo</div>
                        </div>
                    </div>
                </button>
            `;
        }).join('');
        
        if (dashboardSelector) dashboardSelector.innerHTML = proyectosHTML;
        if (backlogSelector) backlogSelector.innerHTML = proyectosHTML;
    }

    // ============================================
    // GESTIÓN DE SECCIONES
    // ============================================
    
    function mostrarSeccionDashboard() {
        currentSection = 'dashboard';
        document.getElementById('dashboard-content').classList.remove('hidden');
        document.getElementById('backlog-content').classList.add('hidden');
        
        selectedProject = null;
        selectedSprint = null;
        document.getElementById('proyecto-content').classList.add('hidden');
        document.getElementById('no-proyecto-message').classList.remove('hidden');
        
        actualizarEstadoNavegacion();
    }

    function mostrarSeccionBacklog() {
        currentSection = 'backlog';
        document.getElementById('dashboard-content').classList.add('hidden');
        document.getElementById('backlog-content').classList.remove('hidden');
        
        selectedProject = null;
        document.getElementById('backlog-proyecto-content').classList.add('hidden');
        document.getElementById('no-backlog-proyecto-message').classList.remove('hidden');
        
        actualizarEstadoNavegacion();
    }

    function actualizarEstadoNavegacion() {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });

        if (currentSection === 'dashboard') {
            document.querySelector('.dashboard-link')?.classList.add('active');
        } else if (currentSection === 'backlog') {
            document.querySelector('.backlog-link')?.classList.add('active');
        }
    }

    // ============================================
    // GESTIÓN DE PROYECTOS Y SPRINTS
    // ============================================
    
    async function seleccionarProyecto(proyecto) {
        try {
            showLoading(true);
            selectedProject = proyecto;
            
            console.log('Proyecto seleccionado:', proyecto);
            
            const selector = currentSection === 'dashboard' ? '#proyecto-selector' : '#backlog-proyecto-selector';
            document.querySelectorAll(`${selector} .proyecto-tab`).forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`${selector} [data-proyecto="${proyecto}"]`)?.classList.add('active');

            if (currentSection === 'dashboard') {
                await cargarDatosSprint(proyecto);
                document.getElementById('proyecto-content').classList.remove('hidden');
                document.getElementById('no-proyecto-message').classList.add('hidden');
            } else if (currentSection === 'backlog') {
                await cargarProductBacklog(proyecto);
                document.getElementById('backlog-proyecto-content').classList.remove('hidden');
                document.getElementById('no-backlog-proyecto-message').classList.add('hidden');
            }
            
        } catch (error) {
            console.error('Error seleccionando proyecto:', error);
            showToast('Error cargando proyecto: ' + error.message, 'error');
        } finally {
            showLoading(false);
        }
    }

    function renderizarSelectorSprints(sprintActual) {
        const selector = document.getElementById('sprint-selector');
        if (!selector) return;

        const sprintsHTML = sprintsDisponibles.map(sprint => {
            const esActual = sprint === sprintActual;
            return `
                <button class="sprint-tab bg-white border-2 border-gray-200 rounded-lg px-4 py-2 transition-all duration-300 hover:border-green-400 hover:bg-green-50 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 ${esActual ? 'border-green-500 bg-green-100' : ''}" data-sprint="${sprint}">
                    <div class="flex items-center space-x-2">
                        <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        <span class="font-medium">Sprint ${sprint}</span>
                        ${esActual ? '<span class="text-xs bg-green-600 text-white px-2 py-1 rounded-full ml-2">Actual</span>' : ''}
                    </div>
                </button>
            `;
        }).join('');
        
        selector.innerHTML = sprintsHTML;
    }

    async function cargarDatosSprint(proyecto) {
        try {
            showLoading(true);
            
            const response = await fetch(`/api/proyecto/${proyecto}/info`);
            if (!response.ok) {
                throw new Error('Error obteniendo información del proyecto');
            }
            
            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Error en la respuesta del proyecto');
            }
            
            const proyectoInfo = data.data;
            sprintsDisponibles = proyectoInfo.sprints || ['1'];
            const sprintActual = proyectoInfo.sprintActual || '1';
            
            console.log('Sprints disponibles para', proyecto, ':', sprintsDisponibles);
            console.log('Sprint actual:', sprintActual);
            
            renderizarSelectorSprints(sprintActual);
            await seleccionarSprint(sprintActual);
            
        } catch (error) {
            console.error('Error cargando datos del sprint:', error);
            sprintsDisponibles = ['1', '2', '3'];
            renderizarSelectorSprints('1');
            await seleccionarSprint('1');
        } finally {
            showLoading(false);
        }
    }

    async function seleccionarSprint(sprint) {
        try {
            selectedSprint = sprint;
            
            console.log('Sprint seleccionado:', sprint);
            
            document.querySelectorAll('.sprint-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-sprint="${sprint}"]`)?.classList.add('active');

            await Promise.all([
                cargarScrumboard(selectedProject, sprint),
                cargarTareasSprint(selectedProject, sprint)
            ]);
            
        } catch (error) {
            console.error('Error seleccionando sprint:', error);
            showToast('Error cargando sprint: ' + error.message, 'error');
        }
    }

    // ============================================
    // SCRUMBOARD - VERSIÓN CORREGIDA
    // ============================================
    
    async function cargarScrumboard(proyecto, sprint) {
        try {
            // CORRECCIÓN: Cargar historias específicas del sprint seleccionado
            const response = await fetch(`/api/historias/${proyecto}/sprint${sprint}`);
            const data = await response.json();
            
            if (!data.success) {
                console.warn('No se pudo cargar scrumboard del sprint, mostrando vacío');
                renderizarScrumboard([]);
                return;
            }

            const historias = data.data || [];
            console.log(`Historias del sprint ${sprint}:`, historias);
            renderizarScrumboard(historias);
            
        } catch (error) {
            console.error('Error cargando scrumboard:', error);
            renderizarScrumboard([]);
        }
    }

    function renderizarScrumboard(historias) {
        const porHacer = historias.filter(h => h[7] === 'POR_HACER' || h[7] === 'TODO');
        const enProceso = historias.filter(h => h[7] === 'EN_PROCESO' || h[7] === 'IN_PROGRESS');
        const completado = historias.filter(h => h[7] === 'COMPLETADO' || h[7] === 'DONE');

        // Actualizar contadores
        document.getElementById('count-por-hacer').textContent = porHacer.length;
        document.getElementById('count-en-proceso').textContent = enProceso.length;
        document.getElementById('count-completado').textContent = completado.length;

        // Renderizar historias en cada columna
        document.getElementById('historias-por-hacer').innerHTML = renderizarHistoriasScrumboard(porHacer);
        document.getElementById('historias-en-proceso').innerHTML = renderizarHistoriasScrumboard(enProceso);
        document.getElementById('historias-completado').innerHTML = renderizarHistoriasScrumboard(completado);
    }

    function renderizarHistoriasScrumboard(historias) {
        if (historias.length === 0) {
            return `
                <div class="scrumboard-empty-state">
                    <svg class="w-8 h-8 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                    <p class="text-xs text-gray-500 text-center">No hay historias</p>
                </div>
            `;
        }

        return historias.map(historia => {
            const [id, titulo, como, quiero, para, prioridad, storyPoints, estado] = historia;
            
            return `
                <div class="scrumboard-story-card" data-historia-id="${id}">
                    <div class="scrumboard-story-header">
                        <h5 class="scrumboard-story-title">${titulo}</h5>
                        <div class="scrumboard-story-badges">
                            <span class="priority-badge priority-${prioridad.toLowerCase()}">${prioridad}</span>
                            <span class="story-points-badge">${storyPoints} SP</span>
                        </div>
                    </div>
                    <div class="scrumboard-story-content">
                        <div class="story-detail">
                            <span class="story-label">Como:</span> 
                            <span class="story-text">${como}</span>
                        </div>
                        <div class="story-detail">
                            <span class="story-label">Quiero:</span> 
                            <span class="story-text">${quiero}</span>
                        </div>
                        <div class="story-detail">
                            <span class="story-label">Para:</span> 
                            <span class="story-text">${para}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // ============================================
    // TAREAS
    // ============================================
    
    async function cargarTareasSprint(proyecto, sprint) {
        try {
            const response = await fetch(`/api/tareas/${proyecto}/sprint${sprint}`);
            const data = await response.json();
            
            if (!data.success) {
                console.warn('No se pudieron cargar tareas, mostrando lista vacía');
                renderizarTareas([]);
                return;
            }

            const tareas = Object.values(data.data || {});
            renderizarTareas(tareas);
            
        } catch (error) {
            console.error('Error cargando tareas:', error);
            renderizarTareas([]);
        }
    }

    function renderizarTareas(tareas) {
        const container = document.getElementById('tareas-list');
        if (!container) return;

        if (tareas.length === 0) {
            container.innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <svg class="w-12 h-12 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                    <p>No hay tareas en este sprint</p>
                </div>
            `;
            return;
        }

        const tareasHTML = tareas.map(tarea => {
            const esAsignada = tarea.personas_asignadas && tarea.personas_asignadas.includes(currentUser.nickname);
            const puedeInteractuar = esAsignada;

            return `
                <div class="tarea-card ${esAsignada ? 'asignada' : ''}" data-tarea-id="${tarea.id}">
                    <div class="flex justify-between items-start mb-3">
                        <div class="flex-1">
                            <h4 class="font-medium text-gray-900">${tarea.nombre}</h4>
                            <p class="text-sm text-gray-600 mt-1">${tarea.descripcion}</p>
                        </div>
                        <div class="flex items-center space-x-2 ml-4">
                            <span class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">${tarea.estimacion || 0}h</span>
                            ${esAsignada ? '<span class="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded font-medium">Asignada a ti</span>' : ''}
                        </div>
                    </div>
                    
                    <div class="flex justify-between items-center">
                        <div class="text-xs text-gray-500">
                            <strong>Asignada a:</strong> ${tarea.personas_asignadas && tarea.personas_asignadas.length > 0 ? tarea.personas_asignadas.join(', ') : 'Sin asignar'}
                        </div>
                        
                        ${puedeInteractuar ? `
                            <select class="estado-select text-xs border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                                    data-tarea-id="${tarea.id}" 
                                    data-original-value="${tarea.estado}">
                                <option value="POR_HACER" ${tarea.estado === 'POR_HACER' ? 'selected' : ''}>Por Hacer</option>
                                <option value="EN_PROCESO" ${tarea.estado === 'EN_PROCESO' ? 'selected' : ''}>En Proceso</option>
                                <option value="COMPLETADO" ${tarea.estado === 'COMPLETADO' ? 'selected' : ''}>Completado</option>
                            </select>
                        ` : `
                            <span class="text-xs px-2 py-1 rounded font-medium ${
                                tarea.estado === 'COMPLETADO' ? 'bg-green-100 text-green-800' :
                                tarea.estado === 'EN_PROCESO' ? 'bg-blue-100 text-blue-800' :
                                'bg-gray-100 text-gray-800'
                            }">
                                ${tarea.estado.replace('_', ' ')}
                            </span>
                        `}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = tareasHTML;
    }

    // ============================================
    // PRODUCT BACKLOG - VISTA MEJORADA
    // ============================================
    
    async function cargarProductBacklog(proyecto) {
        try {
            showLoading(true);
            
            const response = await fetch(`/api/backlog/${proyecto}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || 'Error cargando backlog');
            }

            const historias = data.data || [];
            renderizarProductBacklog(historias, proyecto);
            
        } catch (error) {
            console.error('Error cargando product backlog:', error);
            renderizarProductBacklog([], proyecto);
        } finally {
            showLoading(false);
        }
    }

    function renderizarProductBacklog(historias, proyecto) {
        const container = document.getElementById('backlog-historias');
        const titleContainer = document.getElementById('backlog-proyecto-title');
        const statsContainer = document.getElementById('backlog-stats');
        
        if (!container) return;

        // Actualizar título
        const nombreProyecto = proyecto === 'GenT' ? 'GenT' : 
                             proyecto === 'Proy' ? 'Proyecto Principal' : 
                             proyecto === 'Proy2' ? 'Proyecto 2' : proyecto;
        if (titleContainer) {
            titleContainer.textContent = `Product Backlog - ${nombreProyecto}`;
        }

        // Calcular estadísticas
        const totalSP = historias.reduce((sum, h) => sum + (parseInt(h[6]) || 0), 0);
        const completadas = historias.filter(h => h[7] === 'COMPLETADO' || h[7] === 'DONE').length;
        const prioridades = historias.reduce((acc, h) => {
            acc[h[5]] = (acc[h[5]] || 0) + 1;
            return acc;
        }, {});
        
        if (statsContainer) {
            statsContainer.innerHTML = `
                <div class="backlog-stat">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2"></path>
                    </svg>
                    <span>${historias.length} historias</span>
                </div>
                <div class="backlog-stat">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    <span>${totalSP} SP total</span>
                </div>
                <div class="backlog-stat">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4"></path>
                    </svg>
                    <span>${completadas} completadas</span>
                </div>
                <div class="backlog-stat">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>Alta: ${prioridades.ALTA || 0}</span>
                </div>
            `;
        }

        if (historias.length === 0) {
            container.innerHTML = `
                <div class="backlog-empty-state">
                    <div class="backlog-empty-icon">
                        <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                    </div>
                    <h3 class="backlog-empty-title">No hay historias de usuario</h3>
                    <p class="backlog-empty-description">El product backlog está vacío</p>
                </div>
            `;
            return;
        }

        // Ordenar por prioridad (Alta -> Media -> Baja)
        const ordenPrioridad = { 'ALTA': 1, 'MEDIA': 2, 'BAJA': 3 };
        const historiasOrdenadas = [...historias].sort((a, b) => {
            return (ordenPrioridad[a[5]] || 4) - (ordenPrioridad[b[5]] || 4);
        });

        const historiasHTML = historiasOrdenadas.map((historia, index) => {
            const [id, titulo, como, quiero, para, prioridad, storyPoints, estado, fechaCreacion, creador] = historia;
            
            return `
                <div class="backlog-story-card" data-historia-id="${id}" style="animation-delay: ${index * 0.1}s">
                    <div class="backlog-story-header">
                        <div class="backlog-story-id">#${id}</div>
                        <div class="backlog-story-badges">
                            <span class="priority-badge priority-${prioridad.toLowerCase()}">${prioridad}</span>
                            <span class="status-badge status-${estado.toLowerCase().replace('_', '-')}">${estado.replace('_', ' ')}</span>
                        </div>
                    </div>
                    
                    <h4 class="backlog-story-title">${titulo}</h4>
                    
                    <div class="backlog-story-content">
                        <div class="story-section">
                            <div class="story-section-header">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                                <span>Como</span>
                            </div>
                            <p class="story-section-content">${como}</p>
                        </div>
                        
                        <div class="story-section">
                            <div class="story-section-header">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                </svg>
                                <span>Quiero</span>
                            </div>
                            <p class="story-section-content">${quiero}</p>
                        </div>
                        
                        <div class="story-section">
                            <div class="story-section-header">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span>Para</span>
                            </div>
                            <p class="story-section-content">${para}</p>
                        </div>
                    </div>
                    
                    <div class="backlog-story-footer">
                        <div class="story-points">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                            </svg>
                            <span>${storyPoints} Story Points</span>
                        </div>
                        <div class="story-creator">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            <span>por ${creador || 'Desconocido'}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = historiasHTML;
    }

    // ============================================
    // ACTUALIZACIÓN DE ESTADOS
    // ============================================
    
    async function actualizarEstadoTarea(tareaId, nuevoEstado) {
        try {
            showLoading(true);
            
            const response = await fetch(`/api/tareas/${selectedProject}/sprint${selectedSprint}/${tareaId}/estado`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ estado: nuevoEstado })
            });

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || 'Error actualizando tarea');
            }

            showToast('Estado de tarea actualizado correctamente', 'success');
            
            await cargarTareasSprint(selectedProject, selectedSprint);
            
        } catch (error) {
            console.error('Error actualizando estado de tarea:', error);
            showToast('Error actualizando tarea: ' + error.message, 'error');
            
            const selector = document.querySelector(`[data-tarea-id="${tareaId}"] .estado-select`);
            if (selector) {
                selector.value = selector.dataset.originalValue || 'POR_HACER';
            }
        } finally {
            showLoading(false);
        }
    }

    // ============================================
    // EVENT LISTENERS
    // ============================================
    
    function configurarEventListeners() {
        // Navegación principal
        document.querySelectorAll('.dashboard-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                mostrarSeccionDashboard();
            });
        });

        document.querySelectorAll('.backlog-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                mostrarSeccionBacklog();
            });
        });

        // Selección de proyectos
        document.getElementById('proyecto-selector')?.addEventListener('click', function(e) {
            const boton = e.target.closest('.proyecto-tab');
            if (boton) {
                const proyecto = boton.dataset.proyecto;
                if (proyecto) {
                    seleccionarProyecto(proyecto);
                }
            }
        });

        document.getElementById('backlog-proyecto-selector')?.addEventListener('click', function(e) {
            const boton = e.target.closest('.proyecto-tab');
            if (boton) {
                const proyecto = boton.dataset.proyecto;
                if (proyecto) {
                    seleccionarProyecto(proyecto);
                }
            }
        });

        // Selección de sprints
        document.getElementById('sprint-selector')?.addEventListener('click', function(e) {
            const boton = e.target.closest('.sprint-tab');
            if (boton) {
                const sprint = boton.dataset.sprint;
                if (sprint) {
                    seleccionarSprint(sprint);
                }
            }
        });

        // Actualización de estados de tareas
        document.getElementById('tareas-list')?.addEventListener('change', function(e) {
            if (e.target.classList.contains('estado-select')) {
                const tareaId = e.target.dataset.tareaId;
                const nuevoEstado = e.target.value;
                const estadoAnterior = e.target.dataset.originalValue || 'POR_HACER';
                
                if (nuevoEstado === 'COMPLETADO' && estadoAnterior !== 'COMPLETADO') {
                    if (confirm('¿Marcar esta tarea como completada?')) {
                        actualizarEstadoTarea(tareaId, nuevoEstado);
                    } else {
                        e.target.value = estadoAnterior;
                    }
                } else {
                    actualizarEstadoTarea(tareaId, nuevoEstado);
                }
            }
        });

        // Atajos de teclado
        document.addEventListener('keydown', function(e) {
            if (e.altKey && e.key.toLowerCase() === 'd') {
                e.preventDefault();
                mostrarSeccionDashboard();
            }
            
            if (e.altKey && e.key.toLowerCase() === 'b') {
                e.preventDefault();
                mostrarSeccionBacklog();
            }
            
            if (e.altKey && ['1', '2', '3'].includes(e.key)) {
                e.preventDefault();
                const proyectoIndex = parseInt(e.key) - 1;
                if (proyectosDisponibles[proyectoIndex]) {
                    seleccionarProyecto(proyectosDisponibles[proyectoIndex]);
                }
            }
        });
    }

    // ============================================
    // FUNCIONES DE UTILIDAD
    // ============================================
    
    function showLoading(show) {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) {
            overlay.classList.toggle('hidden', !show);
        }
    }

    function showToast(message, type = 'info') {
        const container = document.getElementById('toastContainer');
        if (!container) return;

        const toastId = 'toast-' + Date.now();
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = `toast toast-${type}`;
        
        const iconos = {
            success: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
            error: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
            warning: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
            info: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
        };
        
        toast.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        ${iconos[type] || iconos.info}
                    </svg>
                    <span>${message}</span>
                </div>
                <button onclick="removeToast('${toastId}')" class="ml-4 text-white hover:text-gray-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;

        container.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);

        setTimeout(() => {
            removeToast(toastId);
        }, 5000);
    }

    function removeToast(toastId) {
        const toast = document.getElementById(toastId);
        if (toast) {
            toast.classList.remove('show');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }
    }

    window.removeToast = removeToast;

    // ============================================
    // INICIALIZACIÓN FINAL
    // ============================================
    
    inicializar();
    
    let intervalId = setInterval(async () => {
        if (selectedProject && selectedSprint && currentSection === 'dashboard') {
            try {
                await Promise.all([
                    cargarScrumboard(selectedProject, selectedSprint),
                    cargarTareasSprint(selectedProject, selectedSprint)
                ]);
            } catch (error) {
                console.error('Error en actualización automática:', error);
            }
        }
    }, 30000);
    
    window.addEventListener('beforeunload', () => {
        clearInterval(intervalId);
    });

    console.log('✅ Dashboard de miembro inicializado correctamente');
});
</script>

<style>
    /* ============================================
       ESTILOS ORIGINALES
       ============================================ */
    .proyecto-tab {
        @apply cursor-pointer transition-all duration-300;
    }
    .proyecto-tab.active {
        @apply border-blue-500 bg-blue-100 shadow-lg;
    }
    .proyecto-tab.active .flex-shrink-0 {
        @apply bg-blue-200;
    }
    .proyecto-tab.active svg {
        @apply text-blue-600;
    }
    
    .sprint-tab {
        @apply cursor-pointer transition-all duration-300;
    }
    .sprint-tab.active {
        @apply border-green-500 bg-green-100 shadow-md;
    }
    .sprint-tab:not(.active):hover {
        @apply border-green-400 bg-green-50;
    }

    .historia-card {
        @apply bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-all duration-200;
    }

    .tarea-card {
        @apply border border-gray-200 rounded-lg p-3 transition-all duration-200;
    }
    .tarea-card.asignada {
        @apply bg-yellow-50 border-yellow-200 hover:bg-yellow-100;
    }
    .tarea-card:not(.asignada) {
        @apply bg-white hover:bg-gray-50;
    }

    .fade-in {
        animation: fadeIn 0.3s ease-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .card-hover {
        transition: all 0.3s ease;
    }
    
    .card-hover:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    /* ============================================
       SCRUMBOARD STYLES - Mejorados
       ============================================ */

    .scrumboard-column {
        @apply bg-gradient-to-b from-gray-50 to-gray-100 rounded-xl p-5 min-h-[300px] border border-gray-200;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }

    .scrumboard-story-card {
        @apply bg-white rounded-lg border border-gray-200 p-4 mb-3 shadow-sm transition-all duration-300;
        cursor: pointer;
    }

    .scrumboard-story-card:hover {
        @apply shadow-md border-gray-300;
        transform: translateY(-2px);
    }

    .scrumboard-story-header {
        @apply flex justify-between items-start mb-3;
    }

    .scrumboard-story-title {
        @apply font-semibold text-gray-900 text-sm leading-tight flex-1 mr-2;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .scrumboard-story-badges {
        @apply flex flex-col space-y-1 flex-shrink-0;
    }

    .scrumboard-story-content {
        @apply space-y-2;
    }

    .story-detail {
        @apply text-xs text-gray-600 flex flex-col;
    }

    .story-label {
        @apply font-medium text-gray-800 mb-1;
    }

    .story-text {
        @apply text-gray-600 leading-relaxed;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .story-points-badge {
        @apply text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full font-medium text-center;
    }

    .scrumboard-empty-state {
        @apply text-center py-8 px-4 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50;
    }

    /* ============================================
       PRODUCT BACKLOG STYLES - Completamente nuevos
       ============================================ */

    #backlog-historias {
        @apply grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6;
    }

    .backlog-story-card {
        @apply bg-white rounded-xl border-2 border-gray-100 p-6 shadow-sm transition-all duration-300;
        background: linear-gradient(135deg, #ffffff 0%, #fafbfc 100%);
        cursor: pointer;
    }

    .backlog-story-card:hover {
        @apply border-gray-300 shadow-lg;
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .backlog-story-header {
        @apply flex justify-between items-start mb-4;
    }

    .backlog-story-id {
        @apply text-xs font-mono bg-gray-100 text-gray-600 px-2 py-1 rounded-md;
    }

    .backlog-story-badges {
        @apply flex space-x-2;
    }

    .backlog-story-title {
        @apply text-lg font-bold text-gray-900 mb-4 leading-tight;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .backlog-story-content {
        @apply space-y-4 mb-6;
    }

    .story-section {
        @apply bg-gray-50 rounded-lg p-3 border-l-4;
    }

    .story-section:nth-child(1) {
        @apply border-blue-400;
    }

    .story-section:nth-child(2) {
        @apply border-green-400;
    }

    .story-section:nth-child(3) {
        @apply border-purple-400;
    }

    .story-section-header {
        @apply flex items-center space-x-2 mb-2 text-sm font-semibold text-gray-700;
    }

    .story-section-header svg {
        @apply text-gray-500;
    }

    .story-section-content {
        @apply text-sm text-gray-600 leading-relaxed;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .backlog-story-footer {
        @apply flex justify-between items-center pt-4 border-t border-gray-100;
    }

    .story-points {
        @apply flex items-center space-x-1 text-sm font-semibold text-indigo-600;
    }

    .story-creator {
        @apply flex items-center space-x-1 text-xs text-gray-500;
    }

    /* ============================================
       BADGES - Sistema unificado
       ============================================ */

    .priority-badge {
        @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold;
    }

    .priority-alta {
        @apply bg-red-100 text-red-800 ring-2 ring-red-200;
    }

    .priority-media {
        @apply bg-yellow-100 text-yellow-800 ring-2 ring-yellow-200;
    }

    .priority-baja {
        @apply bg-green-100 text-green-800 ring-2 ring-green-200;
    }

    .status-badge {
        @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-medium;
    }

    .status-completado, .status-done {
        @apply bg-green-100 text-green-800;
    }

    .status-en-proceso, .status-in-progress {
        @apply bg-blue-100 text-blue-800;
    }

    .status-por-hacer, .status-todo {
        @apply bg-gray-100 text-gray-800;
    }

    /* ============================================
       STATISTICS SECTION
       ============================================ */

    .backlog-stat {
        @apply flex items-center space-x-1 text-sm text-gray-600 bg-gray-50 px-3 py-1 rounded-full;
    }

    /* ============================================
       EMPTY STATES - Mejorados
       ============================================ */

    .backlog-empty-state {
        @apply col-span-full text-center py-16;
    }

    .backlog-empty-icon {
        @apply mx-auto mb-6 p-4 bg-gray-100 rounded-full w-20 h-20 flex items-center justify-center;
    }

    .backlog-empty-title {
        @apply text-xl font-semibold text-gray-900 mb-3;
    }

    .backlog-empty-description {
        @apply text-gray-500 text-lg;
    }

    /* Loading spinner */
    .spinner {
        border: 2px solid #f3f4f6;
        border-top: 2px solid #3b82f6;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Toast notifications */
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        max-width: 500px;
        padding: 16px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }
    
    .toast.show {
        transform: translateX(0);
    }
    
    .toast-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }
    
    .toast-error {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }
    
    .toast-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }
    
    .toast-info {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    }

    /* Loading overlay */
    #loadingOverlay {
        backdrop-filter: blur(4px);
        background: rgba(255, 255, 255, 0.9);
    }

    /* ============================================
       RESPONSIVE IMPROVEMENTS
       ============================================ */

    @media (max-width: 768px) {
        .backlog-story-card {
            @apply p-4;
        }
        
        .backlog-story-title {
            @apply text-base;
        }
        
        .story-section {
            @apply p-2;
        }
        
        .story-section-content {
            -webkit-line-clamp: 2;
        }
        
        .scrumboard-story-card {
            @apply p-3;
        }
        
        .scrumboard-story-title {
            @apply text-xs;
        }

        .proyecto-tab {
            @apply text-sm;
        }
        
        .sprint-tab {
            @apply text-xs px-3 py-2;
        }
        
        .historia-card {
            @apply text-sm;
        }
        
        .tarea-card {
            @apply text-sm;
        }
    }

    @media (max-width: 640px) {
        #backlog-historias {
            @apply grid-cols-1 gap-4;
        }
        
        .backlog-story-footer {
            @apply flex-col space-y-2 items-start;
        }
    }

    /* ============================================
       ANIMATIONS
       ============================================ */

    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .backlog-story-card {
        animation: slideInUp 0.3s ease-out forwards;
    }

    /* ============================================
       ACCESSIBILITY IMPROVEMENTS
       ============================================ */

    .backlog-story-card:focus,
    .scrumboard-story-card:focus {
        @apply outline-none ring-2 ring-blue-500 ring-opacity-50;
    }

    .backlog-story-card:focus-visible,
    .scrumboard-story-card:focus-visible {
        @apply outline-2 outline-blue-500;
    }

    /* Custom scrollbar para contenedores largos */
    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f5f9;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }

    /* Estados visuales mejorados */
    .estado-select:focus {
        @apply ring-2 ring-blue-500 ring-opacity-50;
    }

    .proyecto-tab:focus {
        @apply ring-2 ring-blue-500 ring-opacity-50 outline-none;
    }

    .sprint-tab:focus {
        @apply ring-2 ring-green-500 ring-opacity-50 outline-none;
    }

    /* Selector containers */
    #proyecto-selector, #backlog-proyecto-selector {
        @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
    }

    #sprint-selector {
        @apply flex flex-wrap gap-3;
    }
</style>

<!-- Loading overlay -->
<div id="loadingOverlay" class="fixed inset-0 bg-white bg-opacity-90 flex items-center justify-center z-50 hidden">
    <div class="text-center">
        <div class="spinner mx-auto mb-4"></div>
        <p class="text-gray-600">Cargando...</p>
    </div>
</div>

<!-- Toast container -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>