<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Scrum Master - DARDITO</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-50">
    <!-- Navigation Header -->
    <nav class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-semibold text-gray-900">DARDITO - Scrum Master de <%= grupo %></h1>
                </div>
                <div class="flex items-center space-x-4">
                    <span class="text-sm text-gray-600">Bienvenido, <%= user.nickname %></span>
                    <a href="/logout" class="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-md text-sm font-medium">
                        Cerrar Sesión
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Tabs de Navegación -->
    <div class="bg-white border-b border-gray-200">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mb-px flex space-x-8">
            <button onclick="cambiarTab('dashboard')" id="tab-dashboard" 
                    class="tab-button py-2 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600">
                Dashboard
            </button>
            <% if (datos.GenT) { %>
            <button onclick="cambiarTab('gent')" id="tab-gent" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Generación T
            </button>
            <% } %>
            <% if (datos.Proy) { %>
            <button onclick="cambiarTab('proy')" id="tab-proy" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Proyecto Principal
            </button>
            <% } %>
            <% if (datos.Proy2) { %>
            <button onclick="cambiarTab('proy2')" id="tab-proy2" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Proyecto Secundario
            </button>
            <% } %>
            <button onclick="cambiarTab('equipo')" id="tab-equipo" 
                    class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
                Equipo
            </button>
        </nav>
    </div>

    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <!-- Tab: Dashboard Principal -->
        <div id="content-dashboard" class="tab-content">
            <!-- Resumen de Estadísticas -->
            <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-blue-600 rounded-md flex items-center justify-center">
                                    <span class="text-white text-sm font-semibold">P</span>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Proyectos Activos</dt>
                                    <dd class="text-lg font-medium text-gray-900">
                                        <%= (datos.GenT ? 1 : 0) + (datos.Proy ? 1 : 0) + (datos.Proy2 ? 1 : 0) %>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-green-600 rounded-md flex items-center justify-center">
                                    <span class="text-white text-sm font-semibold">V</span>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Velocidad Promedio</dt>
                                    <dd class="text-lg font-medium text-gray-900">
                                        <%= estadisticas && estadisticas.velocidadPromedio ? estadisticas.velocidadPromedio : '0' %>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-yellow-600 rounded-md flex items-center justify-center">
                                    <span class="text-white text-sm font-semibold">T</span>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Tareas Activas</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="total-tareas-activas">0</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-purple-600 rounded-md flex items-center justify-center">
                                    <span class="text-white text-sm font-semibold">%</span>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Progreso General</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="progreso-general">0%</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gráfico de Burndown -->
            <div class="bg-white shadow rounded-lg mb-8">
                <div class="px-4 py-5 sm:p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Burndown Chart - Sprint Actual</h3>
                    <div class="mb-4">
                        <select id="proyecto-burndown" onchange="actualizarBurndown()" 
                                class="block w-48 pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <% if (datos.GenT) { %>
                            <option value="GenT">Generación T</option>
                            <% } %>
                            <% if (datos.Proy) { %>
                            <option value="Proy">Proyecto Principal</option>
                            <% } %>
                            <% if (datos.Proy2) { %>
                            <option value="Proy2">Proyecto Secundario</option>
                            <% } %>
                        </select>
                    </div>
                    <div class="w-full h-80">
                        <canvas id="burndownChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Estado de Sprints -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <% ['GenT', 'Proy', 'Proy2'].forEach(proyecto => { %>
                <% if (datos[proyecto]) { %>
                <div class="bg-white shadow rounded-lg p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-medium text-gray-900">
                            <%= proyecto === 'GenT' ? 'Generación T' : proyecto === 'Proy' ? 'Proyecto Principal' : 'Proyecto Secundario' %>
                        </h3>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            Sprint <%= datos[proyecto].sprintActual || '1' %>
                        </span>
                    </div>
                    
                    <div class="space-y-4">
                        <div>
                            <div class="flex justify-between text-sm">
                                <span>Historias en Sprint</span>
                                <span id="historias-<%= proyecto.toLowerCase() %>">0</span>
                            </div>
                            <div class="mt-1 bg-gray-200 rounded-full h-2">
                                <div class="bg-blue-600 h-2 rounded-full" style="width: 0%" id="progress-historias-<%= proyecto.toLowerCase() %>"></div>
                            </div>
                        </div>
                        
                        <div>
                            <div class="flex justify-between text-sm">
                                <span>Tareas Completadas</span>
                                <span id="tareas-<%= proyecto.toLowerCase() %>">0/0</span>
                            </div>
                            <div class="mt-1 bg-gray-200 rounded-full h-2">
                                <div class="bg-green-600 h-2 rounded-full" style="width: 0%" id="progress-tareas-<%= proyecto.toLowerCase() %>"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <button onclick="verDetalleProyecto('<%= proyecto %>')" 
                                class="w-full bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                            Ver Detalles
                        </button>
                    </div>
                </div>
                <% } %>
                <% }) %>
            </div>
        </div>

        <!-- Tabs de Proyectos -->
        <% ['GenT', 'Proy', 'Proy2'].forEach(proyecto => { %>
        <% if (datos[proyecto]) { %>
        <div id="content-<%= proyecto.toLowerCase() %>" class="tab-content hidden">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Product Backlog -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">Product Backlog</h3>
                            <p class="mt-1 max-w-2xl text-sm text-gray-500">Historias de usuario del proyecto.</p>
                        </div>
                        <div class="border-t border-gray-200">
                            <ul id="backlog-<%= proyecto.toLowerCase() %>" class="divide-y divide-gray-200">
                                <!-- Las historias se cargan dinámicamente -->
                            </ul>
                        </div>
                    </div>

                    <!-- Tareas del Sprint -->
                    <div class="bg-white shadow rounded-lg mt-6">
                        <div class="px-4 py-5 sm:px-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">Tareas del Sprint Actual</h3>
                        </div>
                        <div class="border-t border-gray-200">
                            <div id="kanban-<%= proyecto.toLowerCase() %>" class="p-4">
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <!-- Por Hacer -->
                                    <div class="bg-gray-50 rounded-lg p-4">
                                        <h4 class="font-medium text-gray-900 mb-3">Por Hacer</h4>
                                        <div id="tareas-por-hacer-<%= proyecto.toLowerCase() %>" class="space-y-2 min-h-32">
                                            <!-- Tareas por hacer -->
                                        </div>
                                    </div>
                                    <!-- En Proceso -->
                                    <div class="bg-blue-50 rounded-lg p-4">
                                        <h4 class="font-medium text-gray-900 mb-3">En Proceso</h4>
                                        <div id="tareas-en-proceso-<%= proyecto.toLowerCase() %>" class="space-y-2 min-h-32">
                                            <!-- Tareas en proceso -->
                                        </div>
                                    </div>
                                    <!-- Completado -->
                                    <div class="bg-green-50 rounded-lg p-4">
                                        <h4 class="font-medium text-gray-900 mb-3">Completado</h4>
                                        <div id="tareas-completadas-<%= proyecto.toLowerCase() %>" class="space-y-2 min-h-32">
                                            <!-- Tareas completadas -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Panel Lateral -->
                <div class="space-y-6">
                    <!-- Sprint Actual -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Sprint #<%= datos[proyecto].sprintActual || '1' %></h3>
                        <% if (datos[proyecto]['sprint' + (datos[proyecto].sprintActual || '1')]) { %>
                        <% const sprint = datos[proyecto]['sprint' + (datos[proyecto].sprintActual || '1')] %>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Inicio:</span>
                                <span><%= sprint.fechaIni ? sprint.fechaIni.join('/') : 'N/A' %></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Fin:</span>
                                <span><%= sprint.fechaFin ? sprint.fechaFin.join('/') : 'N/A' %></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Historias:</span>
                                <span id="sprint-historias-<%= proyecto.toLowerCase() %>">0</span>
                            </div>
                        </div>
                        <% } %>
                    </div>

                    <!-- Estadísticas del Proyecto -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Estadísticas</h3>
                        <div class="space-y-4">
                            <div>
                                <div class="flex justify-between text-sm mb-1">
                                    <span>Progreso del Sprint</span>
                                    <span id="progreso-sprint-<%= proyecto.toLowerCase() %>">0%</span>
                                </div>
                                <div class="bg-gray-200 rounded-full h-2">
                                    <div class="bg-green-600 h-2 rounded-full transition-all duration-300" 
                                         style="width: 0%" id="barra-progreso-<%= proyecto.toLowerCase() %>"></div>
                                </div>
                            </div>
                            
                            <div class="pt-4 border-t">
                                <button onclick="verEstadisticasDetalladas('<%= proyecto %>')" 
                                        class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                    Ver Estadísticas Detalladas
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Acciones Rápidas -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Acciones</h3>
                        <div class="space-y-3">
                            <button onclick="estamosTrabajando()" 
                                    class="w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                Daily Scrum
                            </button>
                            <button onclick="estamosTrabajando()" 
                                    class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                Planning
                            </button>
                            <button onclick="estamosTrabajando()" 
                                    class="w-full bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                Retrospective
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <% } %>
        <% }) %>

        <!-- Tab: Gestión de Equipo -->
        <div id="content-equipo" class="tab-content hidden">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Miembros del Equipo -->
                <div class="bg-white shadow rounded-lg">
                    <div class="px-4 py-5 sm:px-6">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Miembros del Equipo</h3>
                        <p class="mt-1 max-w-2xl text-sm text-gray-500">Estado y rendimiento del equipo.</p>
                    </div>
                    <div class="border-t border-gray-200">
                        <ul class="divide-y divide-gray-200">
                            <% if (typeof miembrosEquipo !== 'undefined') { %>
                            <% miembrosEquipo.forEach(miembro => { %>
                            <li class="px-4 py-4">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10">
                                            <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                                                <span class="text-sm font-medium text-gray-700">
                                                    <%= miembro.nickname.charAt(0).toUpperCase() %>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900"><%= miembro.nickname %></div>
                                            <div class="text-sm text-gray-500 capitalize"><%= miembro.rol %></div>
                                        </div>
                                    </div>
                                    <div class="text-right">
                                        <div class="text-sm text-gray-900">
                                            Tareas: <span id="tareas-usuario-<%= miembro.nickname %>">0</span>
                                        </div>
                                        <div class="text-sm text-gray-500">
                                            Completadas: <span id="completadas-usuario-<%= miembro.nickname %>">0</span>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            <% }) %>
                            <% } %>
                        </ul>
                    </div>
                </div>

                <!-- Métricas del Equipo -->
                <div class="space-y-6">
                    <!-- Velocity Chart -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Velocidad del Equipo</h3>
                        <div class="h-64">
                            <canvas id="velocityChart"></canvas>
                        </div>
                    </div>

                    <!-- Impedimentos -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Impedimentos</h3>
                        <div id="impedimentos-lista" class="space-y-2">
                            <div class="text-sm text-gray-500">No hay impedimentos registrados</div>
                        </div>
                        <button onclick="agregarImpedimento()" 
                                class="mt-4 w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                            Reportar Impedimento
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Impedimentos -->
    <div id="modal-impedimento" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-lg shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Reportar Impedimento</h3>
                <form id="form-impedimento" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Descripción</label>
                        <textarea id="impedimento-descripcion" rows="3" required
                                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Prioridad</label>
                        <select id="impedimento-prioridad" 
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="ALTA">Alta</option>
                            <option value="MEDIA">Media</option>
                            <option value="BAJA">Baja</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Afecta a</label>
                        <select id="impedimento-afectado" 
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="EQUIPO">Todo el equipo</option>
                            <option value="PROYECTO">Proyecto específico</option>
                            <option value="MIEMBRO">Miembro específico</option>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3 mt-6">
                        <button type="button" onclick="cerrarModal('modal-impedimento')" 
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-md text-sm font-medium">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                            Reportar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let tabActual = 'dashboard';
        let burndownChart = null;
        let velocityChart = null;

        // Función para cambiar tabs
        function cambiarTab(tab) {
            // Ocultar contenido actual
            document.getElementById(`content-${tabActual}`).classList.add('hidden');
            document.getElementById(`tab-${tabActual}`).classList.remove('border-blue-500', 'text-blue-600');
            document.getElementById(`tab-${tabActual}`).classList.add('border-transparent', 'text-gray-500');

            // Mostrar nuevo contenido
            document.getElementById(`content-${tab}`).classList.remove('hidden');
            document.getElementById(`tab-${tab}`).classList.add('border-blue-500', 'text-blue-600');
            document.getElementById(`tab-${tab}`).classList.remove('border-transparent', 'text-gray-500');

            tabActual = tab;

            // Cargar contenido específico del tab
            if (tab !== 'dashboard' && tab !== 'equipo') {
                cargarDatosProyecto(tab.toUpperCase());
            } else if (tab === 'equipo') {
                cargarDatosEquipo();
            }
        }

        // Función para cargar datos del proyecto
        async function cargarDatosProyecto(proyecto) {
            try {
                // Cargar Product Backlog
                const backlogResponse = await fetch(`/api/product-backlog/<%= grupo %>/${proyecto}`);
                const backlogData = await backlogResponse.json();
                mostrarProductBacklog(proyecto, backlogData.productBacklog || []);

                // Cargar tareas del sprint
                const sprintActual = '<%= datos.GenT ? datos.GenT.sprintActual : "1" %>';
                const tareasResponse = await fetch(`/api/tareas/<%= grupo %>/${proyecto}/${sprintActual}`);
                const tareasData = await tareasResponse.json();
                mostrarTareasKanban(proyecto, tareasData.tareas || {});

                // Actualizar estadísticas del proyecto
                actualizarEstadisticasProyecto(proyecto, backlogData, tareasData);

            } catch (error) {
                console.error('Error cargando datos del proyecto:', error);
            }
        }

        // Función para mostrar Product Backlog
        function mostrarProductBacklog(proyecto, historias) {
            const container = document.getElementById(`backlog-${proyecto.toLowerCase()}`);
            container.innerHTML = '';

            if (historias.length > 0) {
                historias.forEach(historia => {
                    const li = document.createElement('li');
                    li.className = 'px-4 py-4';
                    li.innerHTML = `
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <div class="flex items-center">
                                    <div class="text-sm font-medium text-gray-900">
                                        ${historia[1]} - ${historia[2]}
                                    </div>
                                    <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                        historia[5] === 'ALTA' ? 'bg-red-100 text-red-800' :
                                        historia[5] === 'MEDIA' ? 'bg-yellow-100 text-yellow-800' :
                                        'bg-green-100 text-green-800'
                                    }">
                                        ${historia[5]}
                                    </span>
                                    <span class="ml-2 text-xs text-gray-500">
                                        ${historia[6]} SP
                                    </span>
                                </div>
                                <div class="text-sm text-gray-500 mt-1">
                                    Para: ${historia[3]}
                                </div>
                            </div>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                historia[7] === 'COMPLETADO' ? 'bg-green-100 text-green-800' :
                                historia[7] === 'EN_PROCESO' ? 'bg-blue-100 text-blue-800' :
                                historia[7] === 'EN_SPRINT' ? 'bg-purple-100 text-purple-800' :
                                'bg-gray-100 text-gray-800'
                            }">
                                ${historia[7].replace('_', ' ')}
                            </span>
                        </div>
                    `;
                    container.appendChild(li);
                });
            } else {
                container.innerHTML = '<li class="px-4 py-4 text-center text-gray-500">No hay historias de usuario</li>';
            }
        }

        // Función para mostrar tareas en formato Kanban
        function mostrarTareasKanban(proyecto, tareas) {
            const porHacer = document.getElementById(`tareas-por-hacer-${proyecto.toLowerCase()}`);
            const enProceso = document.getElementById(`tareas-en-proceso-${proyecto.toLowerCase()}`);
            const completadas = document.getElementById(`tareas-completadas-${proyecto.toLowerCase()}`);

            // Limpiar contenedores
            porHacer.innerHTML = '';
            enProceso.innerHTML = '';
            completadas.innerHTML = '';

            Object.entries(tareas).forEach(([taskId, tarea]) => {
                const tarjetaTarea = crearTarjetaTarea(taskId, tarea);
                
                switch (tarea[0]) {
                    case 'POR_HACER':
                        porHacer.appendChild(tarjetaTarea);
                        break;
                    case 'EN_PROCESO':
                        enProceso.appendChild(tarjetaTarea);
                        break;
                    case 'COMPLETADO':
                    case 'VERIFICADO':
                        completadas.appendChild(tarjetaTarea);
                        break;
                }
            });
        }

        // Función para crear tarjeta de tarea
        function crearTarjetaTarea(taskId, tarea) {
            const div = document.createElement('div');
            div.className = 'bg-white p-3 rounded shadow-sm border cursor-pointer hover:shadow-md transition-shadow';
            div.innerHTML = `
                <div class="text-sm font-medium text-gray-900 mb-1">${tarea[1]}</div>
                <div class="text-xs text-gray-500 mb-2">
                    ${tarea[2] && tarea[2].length > 0 ? `Asignado: ${tarea[2].join(', ')}` : 'Sin asignar'}
                </div>
                <div class="flex justify-between items-center">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        tarea[3] === 'ALTA' ? 'bg-red-100 text-red-800' :
                        tarea[3] === 'MEDIA' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-green-100 text-green-800'
                    }">
                        ${tarea[3]}
                    </span>
                    ${tarea[6] ? `<span class="text-xs text-gray-400">${tarea[6]}h</span>` : ''}
                </div>
            `;
            
            div.onclick = () => verDetalleTarea(taskId, tarea);
            return div;
        }

        // Función para actualizar estadísticas del proyecto
        function actualizarEstadisticasProyecto(proyecto, backlogData, tareasData) {
            const historias = backlogData.productBacklog || [];
            const tareas = Object.values(tareasData.tareas || {});
            
            // Actualizar número de historias
            const historiasElement = document.getElementById(`historias-${proyecto.toLowerCase()}`);
            if (historiasElement) {
                const historiasEnSprint = historias.filter(h => h[7] === 'EN_SPRINT').length;
                historiasElement.textContent = historiasEnSprint;
            }

            // Actualizar tareas
            const tareasElement = document.getElementById(`tareas-${proyecto.toLowerCase()}`);
            if (tareasElement) {
                const tareasCompletadas = tareas.filter(t => t[0] === 'COMPLETADO' || t[0] === 'VERIFICADO').length;
                tareasElement.textContent = `${tareasCompletadas}/${tareas.length}`;
                
                // Actualizar barra de progreso
                const progreso = tareas.length > 0 ? Math.round((tareasCompletadas / tareas.length) * 100) : 0;
                const progressBar = document.getElementById(`progress-tareas-${proyecto.toLowerCase()}`);
                if (progressBar) {
                    progressBar.style.width = `${progreso}%`;
                }
            }

            // Actualizar progreso del sprint
            const progresoElement = document.getElementById(`progreso-sprint-${proyecto.toLowerCase()}`);
            const barraProgresoElement = document.getElementById(`barra-progreso-${proyecto.toLowerCase()}`);
            if (progresoElement && barraProgresoElement && tareas.length > 0) {
                const tareasCompletadas = tareas.filter(t => t[0] === 'COMPLETADO' || t[0] === 'VERIFICADO').length;
                const progreso = Math.round((tareasCompletadas / tareas.length) * 100);
                progresoElement.textContent = `${progreso}%`;
                barraProgresoElement.style.width = `${progreso}%`;
            }
        }

        // Función para cargar datos del equipo
        async function cargarDatosEquipo() {
            try {
                const response = await fetch(`/api/estadisticas/equipo/<%= grupo %>`);
                const data = await response.json();
                
                // Actualizar datos de miembros
                if (data.miembros) {
                    data.miembros.forEach(miembro => {
                        const tareasElement = document.getElementById(`tareas-usuario-${miembro.nickname}`);
                        const completadasElement = document.getElementById(`completadas-usuario-${miembro.nickname}`);
                        
                        if (tareasElement) tareasElement.textContent = miembro.tareasAsignadas;
                        if (completadasElement) completadasElement.textContent = miembro.tareasCompletadas;
                    });
                }

                // Actualizar gráfico de velocidad
                actualizarGraficoVelocidad(data.velocidadEquipo || []);

            } catch (error) {
                console.error('Error cargando datos del equipo:', error);
            }
        }

        // Función para actualizar burndown chart
        function actualizarBurndown() {
            const proyecto = document.getElementById('proyecto-burndown').value;
            // Aquí cargarías los datos específicos del burndown para el proyecto seleccionado
            cargarBurndownData(proyecto);
        }

        // Función para cargar datos del burndown
        async function cargarBurndownData(proyecto) {
            try {
                const sprintActual = '<%= datos.GenT ? datos.GenT.sprintActual : "1" %>';
                const response = await fetch(`/api/sprint/<%= grupo %>/${proyecto}/${sprintActual}`);
                const data = await response.json();
                
                if (data.burndownChart) {
                    mostrarBurndownChart(data.burndownChart);
                }
            } catch (error) {
                console.error('Error cargando burndown data:', error);
            }
        }

        // Función para mostrar burndown chart
        function mostrarBurndownChart(burndownData) {
            const ctx = document.getElementById('burndownChart').getContext('2d');
            
            if (burndownChart) {
                burndownChart.destroy();
            }

            burndownChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: burndownData.plannedWork.map(item => `Día ${item.dia}`),
                    datasets: [{
                        label: 'Trabajo Planificado',
                        data: burndownData.plannedWork.map(item => item.trabajo),
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        tension: 0.1
                    }, {
                        label: 'Trabajo Real',
                        data: burndownData.actualWork.map(item => item.trabajo),
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Función para actualizar gráfico de velocidad
        function actualizarGraficoVelocidad(velocidadData) {
            const ctx = document.getElementById('velocityChart').getContext('2d');
            
            if (velocityChart) {
                velocityChart.destroy();
            }

            velocityChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: velocidadData.map(item => `Sprint ${item.sprint}`),
                    datasets: [{
                        label: 'Tareas Completadas',
                        data: velocidadData.map(item => item.tareasCompletadas),
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Funciones de acciones
        function verDetalleProyecto(proyecto) {
            cambiarTab(proyecto.toLowerCase());
        }

        function verDetalleTarea(taskId, tarea) {
            alert(`Detalle de tarea: ${tarea[1]}\nAsignado a: ${tarea[2].join(', ')}`);
        }

        function verEstadisticasDetalladas(proyecto) {
            window.location.href = `/proyecto/${proyecto}`;
        }

        function facilitarDaily(proyecto) {
            alert(`Facilitar Daily Scrum para ${proyecto}`);
        }

        function planificarSprint(proyecto) {
            alert(`Planificar Sprint para ${proyecto}`);
        }

        function retrospectiva(proyecto) {
            alert(`Realizar Retrospectiva para ${proyecto}`);
        }

        function estamosTrabajando() {
            alert('Estamos trabajando en esa función... larre no labura')
        }

        function agregarImpedimento() {
            document.getElementById('modal-impedimento').classList.remove('hidden');
        }

        function cerrarModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        // Inicialización
        document.addEventListener('DOMContentLoaded', () => {
            // Cargar datos iniciales del dashboard
            cargarEstadisticasGenerales();
            
            // Si hay al menos un proyecto, cargar su burndown
            const selectProyecto = document.getElementById('proyecto-burndown');
            if (selectProyecto && selectProyecto.options.length > 0) {
                actualizarBurndown();
            }
        });

        // Función para cargar estadísticas generales
        async function cargarEstadisticasGenerales() {
            try {
                let totalTareasActivas = 0;
                let totalTareasCompletadas = 0;
                
                // Cargar datos de cada proyecto activo
                const proyectos = ['GenT', 'Proy', 'Proy2'].filter(p => 
                    document.getElementById(`content-${p.toLowerCase()}`) !== null
                );

                for (const proyecto of proyectos) {
                    try {
                        const sprintActual = '1'; // Usar sprint actual del proyecto
                        const response = await fetch(`/api/tareas/<%= grupo %>/${proyecto}/${sprintActual}`);
                        const data = await response.json();
                        
                        if (data.tareas) {
                            const tareas = Object.values(data.tareas);
                            totalTareasActivas += tareas.length;
                            totalTareasCompletadas += tareas.filter(t => t[0] === 'COMPLETADO' || t[0] === 'VERIFICADO').length;
                        }
                    } catch (error) {
                        console.warn(`Error cargando tareas de ${proyecto}:`, error);
                    }
                }

                // Actualizar elementos del DOM
                document.getElementById('total-tareas-activas').textContent = totalTareasActivas;
                
                const progresoGeneral = totalTareasActivas > 0 ? 
                    Math.round((totalTareasCompletadas / totalTareasActivas) * 100) : 0;
                document.getElementById('progreso-general').textContent = `${progresoGeneral}%`;

            } catch (error) {
                console.error('Error cargando estadísticas generales:', error);
            }
        }

        // Manejador del formulario de impedimento
        document.getElementById('form-impedimento').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const descripcion = document.getElementById('impedimento-descripcion').value;
            const prioridad = document.getElementById('impedimento-prioridad').value;
            const afectado = document.getElementById('impedimento-afectado').value;
            
            // Aquí enviarías el impedimento al servidor
            console.log('Impedimento reportado:', { descripcion, prioridad, afectado });
            
            cerrarModal('modal-impedimento');
            alert('Impedimento reportado correctamente');
            
            // Resetear formulario
            document.getElementById('form-impedimento').reset();
        });
    </script>
</body>
</html>