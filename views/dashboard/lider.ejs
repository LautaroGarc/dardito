<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Líder - Dardito</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-gray-100 min-h-screen">
    <!-- Header medio feo pero funcional -->
    <header class="bg-gray-800 border-b-2 border-gray-700 p-4">
        <div class="container mx-auto flex justify-between items-center">
            <div>
                <h1 class="text-xl font-bold text-red-400">👑 Dashboard Líder</h1>
                <p class="text-sm text-gray-300">
                    👤 <span class="font-semibold"><%= user.nickname %></span> - 
                    🏷️ <span class="bg-red-700 px-2 py-1 rounded text-xs"><%= user.rol %></span> - 
                    👥 <span class="bg-blue-700 px-2 py-1 rounded text-xs"><%= grupo %></span>
                </p>
            </div>
            <button onclick="window.location.href='/logout'" class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded text-sm border border-red-500">
                🚪 Salir
            </button>
        </div>
    </header>

    <div class="container mx-auto px-4 py-6">
        <!-- Navegación y controles -->
        <div class="mb-6">
            <div class="flex gap-2 flex-wrap items-center">
                <!-- Proyectos -->
                <button onclick="cambiarProyecto('GenT')" id="btn-GenT" class="bg-purple-700 hover:bg-purple-800 px-4 py-2 rounded border border-purple-600 text-sm font-semibold">
                    🎓 Generación T
                </button>
                <button onclick="cambiarProyecto('Proy')" id="btn-Proy" class="bg-blue-700 hover:bg-blue-800 px-4 py-2 rounded border border-blue-600 text-sm font-semibold">
                    💼 Proyecto
                </button>
                <% if (datos.Proy2) { %>
                <button onclick="cambiarProyecto('Proy2')" id="btn-Proy2" class="bg-green-700 hover:bg-green-800 px-4 py-2 rounded border border-green-600 text-sm font-semibold">
                    📋 Proyecto 2
                </button>
                <% } %>
                
                <div class="w-px h-8 bg-gray-600 mx-2"></div>
                
                <!-- Funciones de líder -->
                <button onclick="toggleEstadisticas()" id="btn-stats" class="bg-yellow-700 hover:bg-yellow-800 px-4 py-2 rounded border border-yellow-600 text-sm font-semibold">
                    📊 Estadísticas
                </button>
                <button onclick="abrirModalHistoria()" class="bg-green-700 hover:bg-green-800 px-4 py-2 rounded border border-green-600 text-sm font-semibold">
                    ➕ Nueva Historia
                </button>
                <button onclick="abrirModalTarea()" class="bg-orange-700 hover:bg-orange-800 px-4 py-2 rounded border border-orange-600 text-sm font-semibold">
                    📝 Nueva Tarea
                </button>
            </div>
        </div>

        <!-- Panel de estadísticas -->
        <div id="panel-estadisticas" class="hidden mb-6">
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h2 class="text-lg font-semibold mb-4 text-yellow-400">📊 Estadísticas Completas</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div id="stats-proyecto" class="space-y-4">
                        <!-- Stats del proyecto -->
                    </div>
                    <div id="stats-equipo" class="col-span-1 md:col-span-1 lg:col-span-3">
                        <!-- Stats del equipo -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Contenedor principal -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
            
            <!-- Panel principal -->
            <div class="lg:col-span-3">
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700 mb-6">
                    <h2 class="text-lg font-semibold mb-4 text-yellow-400 flex items-center justify-between">
                        ⭐ Gestión de Tareas
                        <span id="proyecto-actual" class="text-sm text-gray-400">(GenT)</span>
                    </h2>
                    
                    <!-- Mis tareas -->
                    <div class="mb-6">
                        <h3 class="text-md font-semibold mb-3 text-blue-400">🎯 Mis Tareas Asignadas</h3>
                        <div id="mis-tareas" class="space-y-3">
                            <!-- Se cargan dinámicamente -->
                        </div>
                    </div>

                    <!-- Todas las tareas del equipo -->
                    <div class="border-t border-gray-600 pt-4">
                        <h3 class="text-md font-semibold mb-3 text-green-400">👥 Todas las Tareas del Sprint</h3>
                        <div id="todas-tareas" class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <!-- Se llenan dinámicamente -->
                        </div>
                    </div>

                    <!-- Sección para verificar tareas completadas -->
                    <div class="border-t border-gray-600 pt-4 mt-6">
                        <h3 class="text-md font-semibold mb-3 text-purple-400">✅ Tareas Para Verificar</h3>
                        <div id="tareas-verificar" class="space-y-2">
                            <!-- Se llenan dinámicamente -->
                        </div>
                    </div>
                </div>

                <!-- Panel de Product Backlog expandido -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold text-purple-400">📚 Product Backlog</h2>
                        <div class="flex gap-2">
                            <button onclick="seleccionarHistorias()" class="bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm">
                                🎯 Seleccionar para Sprint
                            </button>
                        </div>
                    </div>
                    <div id="product-backlog-completo" class="space-y-2 max-h-96 overflow-y-auto">
                        <!-- Se llena dinámicamente -->
                    </div>
                </div>
            </div>

            <!-- Panel lateral -->
            <div class="space-y-4">
                
                <!-- Info del sprint -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <h3 class="font-semibold mb-3 text-green-400">📅 Sprint Actual</h3>
                    <div id="sprint-info" class="text-sm space-y-2">
                        <p>🚀 Sprint: <span id="sprint-numero">-</span></p>
                        <p>📅 Inicio: <span id="sprint-inicio">-</span></p>
                        <p>🏁 Fin: <span id="sprint-fin">-</span></p>
                        <div class="mt-3 p-2 bg-gray-700 rounded">
                            <p class="text-xs">Progreso:</p>
                            <div class="w-full bg-gray-600 rounded-full h-2 mt-1">
                                <div id="progreso-bar" class="bg-green-500 h-2 rounded-full" style="width: 0%"></div>
                            </div>
                            <p class="text-xs mt-1"><span id="progreso-text">0%</span></p>
                        </div>
                    </div>
                </div>

                <!-- Navegación de sprints -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <h3 class="font-semibold mb-3 text-blue-400">🔄 Ver Sprints</h3>
                    <div id="botones-sprints" class="grid grid-cols-1 gap-2">
                        <!-- Se llenan dinámicamente -->
                    </div>
                </div>

                <!-- Scrum Board -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <h3 class="font-semibold mb-3 text-red-400">🎯 Historias en Sprint</h3>
                    <div id="scrum-board" class="space-y-2 text-sm max-h-48 overflow-y-auto">
                        <!-- Se llena dinámicamente -->
                    </div>
                </div>

                <!-- Herramientas rápidas -->
                <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <h3 class="font-semibold mb-3 text-orange-400">🛠️ Herramientas</h3>
                    <div class="space-y-2">
                        <button onclick="abrirCargaMasiva()" class="w-full bg-purple-600 hover:bg-purple-700 px-3 py-2 rounded text-sm">
                            📄 Carga Masiva Excel
                        </button>
                        <button onclick="exportarDatos()" class="w-full bg-indigo-600 hover:bg-indigo-700 px-3 py-2 rounded text-sm">
                            💾 Exportar Datos
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para nueva historia -->
    <div id="modal-historia" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-gray-800 rounded-lg p-6 border border-gray-600 max-w-lg w-full mx-4 max-h-screen overflow-y-auto">
            <h3 class="text-lg font-semibold mb-4">➕ Nueva Historia de Usuario</h3>
            <form id="form-historia" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-1">Como:</label>
                    <input type="text" name="como" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Quiero:</label>
                    <input type="text" name="quiero" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Para:</label>
                    <input type="text" name="para" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Criterio de Aceptación:</label>
                    <textarea name="criterio_aceptacion" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white h-24" required></textarea>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-1">Prioridad:</label>
                        <select name="prioridad" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                            <option value="MUY_BAJA">Muy Baja</option>
                            <option value="BAJA">Baja</option>
                            <option value="MEDIA" selected>Media</option>
                            <option value="ALTA">Alta</option>
                            <option value="MUY_ALTA">Muy Alta</option>
                            <option value="URGENTE">Urgente</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-1">Story Points:</label>
                        <input type="number" name="history_points" min="1" max="13" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                    </div>
                </div>
                <div class="flex gap-2 pt-4">
                    <button type="submit" class="flex-1 bg-green-600 hover:bg-green-700 px-4 py-2 rounded">
                        ✅ Crear Historia
                    </button>
                    <button type="button" onclick="cerrarModal('modal-historia')" class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded">
                        ❌ Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal para nueva tarea -->
    <div id="modal-tarea" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-gray-800 rounded-lg p-6 border border-gray-600 max-w-lg w-full mx-4">
            <h3 class="text-lg font-semibold mb-4">📝 Nueva Tarea Técnica</h3>
            <form id="form-tarea" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-1">Descripción:</label>
                    <textarea name="description" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white h-24" required></textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Asignar a (separar con comas):</label>
                    <input type="text" name="personas_asignadas" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" 
                           placeholder="Juan Pérez, María García">
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-1">Prioridad:</label>
                        <select name="prioridad" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                            <option value="MUY_BAJA">Muy Baja</option>
                            <option value="BAJA">Baja</option>
                            <option value="MEDIA" selected>Media</option>
                            <option value="ALTA">Alta</option>
                            <option value="MUY_ALTA">Muy Alta</option>
                            <option value="URGENTE">Urgente</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-1">Fecha Límite:</label>
                        <input type="date" name="fecha_limite" class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white" required>
                    </div>
                </div>
                <div class="flex gap-2 pt-4">
                    <button type="submit" class="flex-1 bg-green-600 hover:bg-green-700 px-4 py-2 rounded">
                        ✅ Crear Tarea
                    </button>
                    <button type="button" onclick="cerrarModal('modal-tarea')" class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded">
                        ❌ Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal genérico para confirmaciones -->
    <div id="modal-confirmacion" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-gray-800 rounded-lg p-6 border border-gray-600 max-w-md w-full mx-4">
            <h3 class="text-lg font-semibold mb-4" id="titulo-confirmacion">Confirmar</h3>
            <div id="contenido-confirmacion" class="mb-4">
                <!-- Contenido dinámico -->
            </div>
            <div class="flex gap-2">
                <button id="btn-confirmar-accion" class="flex-1 bg-green-600 hover:bg-green-700 px-4 py-2 rounded">
                    ✅ Confirmar
                </button>
                <button onclick="cerrarModal('modal-confirmacion')" class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded">
                    ❌ Cancelar
                </button>
            </div>
        </div>
    </div>

    <script>
        let proyectoActual = 'GenT';
        let sprintActual = '1';
        let mostrandoEstadisticas = false;

        // Cambiar proyecto
        function cambiarProyecto(proyecto) {
            proyectoActual = proyecto;
            document.getElementById('proyecto-actual').textContent = `(${proyecto})`;
            
            // Actualizar botones
            document.querySelectorAll('[id^="btn-"]:not(#btn-stats)').forEach(btn => {
                btn.classList.remove('bg-yellow-600');
                if (btn.id.includes('GenT') || btn.id.includes('Proy')) {
                    btn.classList.add('bg-gray-700');
                }
            });
            document.getElementById(`btn-${proyecto}`).classList.add('bg-yellow-600');
            
            cargarDatos();
        }

        // Toggle estadísticas
        function toggleEstadisticas() {
            const panel = document.getElementById('panel-estadisticas');
            mostrandoEstadisticas = !mostrandoEstadisticas;
            
            if (mostrandoEstadisticas) {
                panel.classList.remove('hidden');
                cargarEstadisticasCompletas();
            } else {
                panel.classList.add('hidden');
            }
        }

        // Cargar estadísticas completas (proyecto + equipo)
        async function cargarEstadisticasCompletas() {
            try {
                // Estadísticas del proyecto
                const responseProyecto = await fetch(`/api/estadisticas/<%= grupo %>/${proyectoActual}`);
                const dataProyecto = await responseProyecto.json();
                
                document.getElementById('stats-proyecto').innerHTML = `
                    <div class="bg-blue-900 p-4 rounded border border-blue-700">
                        <h4 class="font-semibold text-blue-300">📊 Progreso</h4>
                        <p class="text-2xl font-bold">${dataProyecto.proyecto.porcentajeCompletado}%</p>
                        <p class="text-sm text-blue-200">Completado</p>
                    </div>
                    <div class="bg-green-900 p-4 rounded border border-green-700">
                        <h4 class="font-semibold text-green-300">✅ Tareas</h4>
                        <p class="text-2xl font-bold">${dataProyecto.proyecto.tareasCompletadas}/${dataProyecto.proyecto.totalTareas}</p>
                        <p class="text-sm text-green-200">Finalizadas</p>
                    </div>
                `;
                
                // Estadísticas del equipo
                const responseEquipo = await fetch(`/api/estadisticas/equipo/<%= grupo %>`);
                const dataEquipo = await responseEquipo.json();
                
                document.getElementById('stats-equipo').innerHTML = `
                    <div class="bg-gray-700 p-4 rounded">
                        <h4 class="font-semibold text-gray-300 mb-3">👥 Rendimiento del Equipo</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            ${dataEquipo.miembros.map(miembro => `
                                <div class="bg-gray-600 p-3 rounded">
                                    <p class="font-medium text-white">${miembro.nickname}</p>
                                    <p class="text-sm text-gray-300">${miembro.rol}</p>
                                    <div class="mt-2">
                                        <div class="flex justify-between text-xs">
                                            <span>Tareas:</span>
                                            <span>${miembro.tareasCompletadas}/${miembro.tareasAsignadas}</span>
                                        </div>
                                        <div class="w-full bg-gray-500 rounded-full h-1 mt-1">
                                            <div class="bg-green-500 h-1 rounded-full" style="width: ${miembro.porcentajeCompletado}%"></div>
                                        </div>
                                        <p class="text-xs text-gray-400 mt-1">⏱️ ${Math.floor(miembro.tiempoLlamada / 60)}min en llamada</p>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
                
            } catch (error) {
                console.error('Error cargando estadísticas:', error);
            }
        }

        // Cargar datos principales
        async function cargarDatos() {
            try {
                await Promise.all([
                    cargarTareas(),
                    cargarTodasLasTareas(),
                    cargarTareasParaVerificar(),
                    cargarSprintInfo(),
                    cargarProductBacklog(),
                    cargarBotonesSprints(),
                    cargarScrumBoard()
                ]);
            } catch (error) {
                console.error('Error cargando datos:', error);
            }
        }

        // Cargar mis tareas
        async function cargarTareas() {
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/${sprintActual}`);
                const data = await response.json();
                
                const container = document.getElementById('mis-tareas');
                
                // Filtrar solo las tareas asignadas al usuario actual
                const misTareas = Object.entries(data.tareas || {}).filter(([id, tarea]) => {
                    const [, , asignados] = tarea;
                    return asignados && asignados.includes('<%= user.nickname %>');
                });
                
                if (misTareas.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-4 text-gray-500">
                            <div class="text-2xl mb-1">😴</div>
                            <p class="text-sm">No tienes tareas asignadas</p>
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = misTareas.map(([id, tarea]) => {
                    const [estado, descripcion, asignados, prioridad, fechaLimite] = tarea;
                    const estadoColor = {
                        'POR_HACER': 'bg-gray-600',
                        'EN_PROCESO': 'bg-yellow-600',
                        'COMPLETADO': 'bg-green-600',
                        'VERIFICADO': 'bg-blue-600'
                    };
                    
                    return `
                        <div class="bg-yellow-900 border border-yellow-600 rounded p-3">
                            <div class="flex justify-between items-start mb-2">
                                <h4 class="font-semibold text-yellow-100 text-sm">${descripcion}</h4>
                                <span class="${estadoColor[estado] || 'bg-gray-600'} px-2 py-1 rounded text-xs">
                                    ${estado}
                                </span>
                            </div>
                            <p class="text-xs text-yellow-200 mb-2">
                                🚨 ${prioridad} | 📅 ${fechaLimite}
                            </p>
                            ${estado === 'POR_HACER' || estado === 'EN_PROCESO' ? `
                                <div class="flex gap-2">
                                    ${estado === 'POR_HACER' ? `
                                        <button onclick="cambiarEstadoTarea('${id}', 'EN_PROCESO')" 
                                                class="bg-yellow-600 hover:bg-yellow-700 px-2 py-1 rounded text-xs">
                                            ▶️ Iniciar
                                        </button>
                                    ` : ''}
                                    ${estado === 'EN_PROCESO' ? `
                                        <button onclick="cambiarEstadoTarea('${id}', 'COMPLETADO')" 
                                                class="bg-green-600 hover:bg-green-700 px-2 py-1 rounded text-xs">
                                            ✅ Completar
                                        </button>
                                    ` : ''}
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('');
                
            } catch (error) {
                document.getElementById('mis-tareas').innerHTML = `
                    <div class="text-red-400 p-4 bg-red-900 rounded">
                        ❌ Error cargando mis tareas
                    </div>
                `;
            }
        }

        // Cargar todas las tareas del equipo (organizado por estado)
        async function cargarTodasLasTareas() {
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/${sprintActual}`);
                const data = await response.json();
                
                const container = document.getElementById('todas-tareas');
                
                if (!data.tareas || Object.keys(data.tareas).length === 0) {
                    container.innerHTML = `
                        <div class="col-span-3 text-center py-6 text-gray-500">
                            <p>No hay tareas en este sprint</p>
                        </div>
                    `;
                    return;
                }
                
                // Agrupar por estado
                const estados = ['POR_HACER', 'EN_PROCESO', 'COMPLETADO'];
                
                container.innerHTML = estados.map(estado => {
                    const tareasEstado = Object.entries(data.tareas).filter(([id, tarea]) => tarea[0] === estado);
                    const estadoColors = {
                        'POR_HACER': 'bg-gray-700 border-gray-600',
                        'EN_PROCESO': 'bg-yellow-800 border-yellow-700',
                        'COMPLETADO': 'bg-green-800 border-green-700'
                    };
                    
                    return `
                        <div class="${estadoColors[estado]} border rounded-lg p-3">
                            <h4 class="font-semibold mb-3 text-sm">${estado} (${tareasEstado.length})</h4>
                            <div class="space-y-2 max-h-60 overflow-y-auto">
                                ${tareasEstado.map(([id, tarea]) => {
                                    const [, descripcion, asignados, prioridad] = tarea;
                                    return `
                                        <div class="bg-gray-800 p-2 rounded text-xs border border-gray-600">
                                            <p class="font-medium mb-1">${descripcion.substring(0, 50)}${descripcion.length > 50 ? '...' : ''}</p>
                                            <p class="text-gray-400">👥 ${asignados.join(', ')}</p>
                                            <p class="text-gray-400">🚨 ${prioridad}</p>
                                            <div class="mt-2 flex gap-1">
                                                <button onclick="editarTarea('${id}')" class="bg-blue-600 hover:bg-blue-700 px-1 py-1 rounded text-xs">
                                                    ✏️
                                                </button>
                                                <button onclick="reasignarTarea('${id}')" class="bg-purple-600 hover:bg-purple-700 px-1 py-1 rounded text-xs">
                                                    👥
                                                </button>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    `;
                }).join('');
                
            } catch (error) {
                document.getElementById('todas-tareas').innerHTML = `
                    <div class="col-span-3 text-red-400 p-4 bg-red-900 rounded">
                        ❌ Error cargando tareas del equipo
                    </div>
                `;
            }
        }

        // Cargar tareas para verificar
        async function cargarTareasParaVerificar() {
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/${sprintActual}`);
                const data = await response.json();
                
                const container = document.getElementById('tareas-verificar');
                
                const tareasCompletadas = Object.entries(data.tareas || {}).filter(([id, tarea]) => tarea[0] === 'COMPLETADO');
                
                if (tareasCompletadas.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-4 text-gray-500">
                            <p class="text-sm">No hay tareas pendientes de verificación</p>
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = tareasCompletadas.map(([id, tarea]) => {
                    const [estado, descripcion, asignados, prioridad, fechaLimite] = tarea;
                    return `
                        <div class="bg-green-900 border border-green-600 rounded p-3">
                            <div class="flex justify-between items-start mb-2">
                                <div>
                                    <h4 class="font-semibold text-green-100 text-sm">${descripcion}</h4>
                                    <p class="text-xs text-green-200">👥 ${asignados.join(', ')} | 🚨 ${prioridad}</p>
                                </div>
                                <button onclick="verificarTarea('${id}')" class="bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-xs">
                                    ✅ Verificar
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');
                
            } catch (error) {
                document.getElementById('tareas-verificar').innerHTML = `
                    <div class="text-red-400 p-4 bg-red-900 rounded">
                        ❌ Error cargando tareas para verificar
                    </div>
                `;
            }
        }

        // Cargar product backlog completo
        async function cargarProductBacklog() {
            try {
                const response = await fetch(`/api/product-backlog/<%= grupo %>/${proyectoActual}`);
                const data = await response.json();
                
                const container = document.getElementById('product-backlog-completo');
                
                if (!data.productBacklog || data.productBacklog.length === 0) {
                    container.innerHTML = '<p class="text-gray-500 text-sm text-center py-4">No hay historias en el Product Backlog</p>';
                    return;
                }
                
                container.innerHTML = data.productBacklog.map(historia => {
                    const [id, como, quiero, para, criterio, prioridad, points, estado] = historia;
                    const estadoColor = {
                        'POR_HACER': 'border-gray-600 bg-gray-700',
                        'EN_SPRINT': 'border-yellow-600 bg-yellow-900',
                        'COMPLETADO': 'border-green-600 bg-green-900'
                    };
                    
                    return `
                        <div class="border ${estadoColor[estado] || 'border-gray-600 bg-gray-700'} rounded p-3">
                            <div class="flex justify-between items-start mb-2">
                                <div>
                                    <h4 class="font-semibold text-sm">${quiero}</h4>
                                    <p class="text-xs text-gray-400">Como ${como}</p>
                                    <p class="text-xs text-gray-400">Para ${para}</p>
                                </div>
                                <div class="text-right">
                                    <span class="block text-xs font-bold">${points} pts</span>
                                    <span class="block text-xs">${prioridad}</span>
                                </div>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-xs px-2 py-1 rounded bg-gray-600">${estado}</span>
                                <div class="flex gap-1">
                                    ${estado === 'POR_HACER' ? `
                                        <button onclick="seleccionarParaSprint('${id}')" class="bg-blue-600 hover:bg-blue-700 px-2 py-1 rounded text-xs">
                                            🎯 Al Sprint
                                        </button>
                                    ` : ''}
                                    <button onclick="editarHistoria('${id}')" class="bg-purple-600 hover:bg-purple-700 px-2 py-1 rounded text-xs">
                                        ✏️ Editar
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                }).join('');
                
            } catch (error) {
                document.getElementById('product-backlog-completo').innerHTML = `
                    <div class="text-red-400 p-4 bg-red-900 rounded">
                        ❌ Error cargando product backlog
                    </div>
                `;
            }
        }

        // Funciones auxiliares (similares a scrum master)
        async function cargarSprintInfo() {
            try {
                const response = await fetch(`/api/sprint/<%= grupo %>/${proyectoActual}/${sprintActual}`);
                const data = await response.json();
                
                document.getElementById('sprint-numero').textContent = sprintActual;
                document.getElementById('sprint-inicio').textContent = data.fechaIni.join('/');
                document.getElementById('sprint-fin').textContent = data.fechaFin.join('/');
                
            } catch (error) {
                console.error('Error cargando sprint info:', error);
            }
        }

        async function cargarBotonesSprints() {
            document.getElementById('botones-sprints').innerHTML = `
                <button onclick="cambiarSprint('1')" 
                        class="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded text-sm ${sprintActual === '1' ? 'ring-2 ring-yellow-500' : ''}">
                    🚀 Sprint 1
                </button>
            `;
        }

        async function cargarScrumBoard() {
            try {
                const response = await fetch(`/api/sprint/<%= grupo %>/${proyectoActual}/${sprintActual}`);
                const data = await response.json();
                
                const container = document.getElementById('scrum-board');
                
                if (!data.scrumBoard || data.scrumBoard.length === 0) {
                    container.innerHTML = '<p class="text-gray-500 text-sm">No hay historias seleccionadas para este sprint</p>';
                    return;
                }
                
                container.innerHTML = data.scrumBoard.map(historiaId => `
                    <div class="bg-gray-700 p-2 rounded border border-gray-600">
                        <p class="text-xs font-medium">${historiaId}</p>
                        <p class="text-xs text-gray-400">Historia en sprint</p>
                        <button onclick="removerDelSprint('${historiaId}')" class="mt-1 bg-red-600 hover:bg-red-700 px-2 py-1 rounded text-xs">
                            ❌ Remover
                        </button>
                    </div>
                `).join('');
                
            } catch (error) {
                document.getElementById('scrum-board').innerHTML = `
                    <p class="text-red-400 text-sm">❌ Error cargando sprint board</p>
                `;
            }
        }

        // Funciones de modales
        function abrirModalHistoria() {
            document.getElementById('modal-historia').classList.remove('hidden');
            document.getElementById('modal-historia').classList.add('flex');
        }

        function abrirModalTarea() {
            document.getElementById('modal-tarea').classList.remove('hidden');
            document.getElementById('modal-tarea').classList.add('flex');
        }

        function cerrarModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
            document.getElementById(modalId).classList.remove('flex');
        }

        // Manejar formulario de nueva historia
        document.getElementById('form-historia').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch(`/api/product-backlog/<%= grupo %>/${proyectoActual}/historia`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (response.ok) {
                    cerrarModal('modal-historia');
                    e.target.reset();
                    cargarProductBacklog();
                    alert('✅ Historia creada exitosamente');
                } else {
                    alert('❌ Error creando historia');
                }
            } catch (error) {
                alert('❌ Error de conexión');
            }
        });

        // Manejar formulario de nueva tarea
        document.getElementById('form-tarea').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            
            // Convertir personas asignadas a array
            data.personas_asignadas = data.personas_asignadas.split(',').map(s => s.trim()).filter(s => s);
            
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/crear`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (response.ok) {
                    cerrarModal('modal-tarea');
                    e.target.reset();
                    cargarDatos();
                    alert('✅ Tarea creada exitosamente');
                } else {
                    alert('❌ Error creando tarea');
                }
            } catch (error) {
                alert('❌ Error de conexión');
            }
        });

        // Funciones específicas del líder
        async function verificarTarea(tareaId) {
            mostrarConfirmacion(
                'Verificar Tarea',
                '¿Confirmar que esta tarea está completada correctamente?',
                () => cambiarEstadoTarea(tareaId, 'VERIFICADO')
            );
        }

        async function seleccionarParaSprint(historiaId) {
            try {
                const response = await fetch(`/api/sprint/<%= grupo %>/${proyectoActual}/seleccionar-historias`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ historias_ids: [historiaId] })
                });
                
                if (response.ok) {
                    cargarDatos();
                    alert('✅ Historia agregada al sprint');
                } else {
                    alert('❌ Error agregando historia al sprint');
                }
            } catch (error) {
                alert('❌ Error de conexión');
            }
        }

        function seleccionarHistorias() {
            alert('🚧 Funcionalidad en desarrollo - Selección múltiple de historias');
        }

        function reasignarTarea(tareaId) {
            const nuevasPersonas = prompt('Ingresa las personas asignadas (separadas por comas):');
            if (nuevasPersonas !== null) {
                const personas = nuevasPersonas.split(',').map(s => s.trim()).filter(s => s);
                reasignarTareaAjax(tareaId, personas);
            }
        }

        async function reasignarTareaAjax(tareaId, personas) {
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/${tareaId}/asignar`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ personas_asignadas: personas })
                });
                
                if (response.ok) {
                    cargarDatos();
                    alert('✅ Tarea reasignada exitosamente');
                } else {
                    alert('❌ Error reasignando tarea');
                }
            } catch (error) {
                alert('❌ Error de conexión');
            }
        }

        // Funciones básicas reutilizadas
        async function cambiarEstadoTarea(tareaId, nuevoEstado) {
            try {
                const response = await fetch(`/api/tareas/<%= grupo %>/${proyectoActual}/${tareaId}/estado`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ estado: nuevoEstado })
                });
                
                if (response.ok) {
                    cargarDatos();
                    cerrarModal('modal-confirmacion');
                } else {
                    alert('❌ Error cambiando estado');
                }
            } catch (error) {
                alert('❌ Error de conexión');
            }
        }

        function cambiarSprint(sprint) {
            sprintActual = sprint;
            cargarDatos();
        }

        // Función para mostrar confirmaciones
        function mostrarConfirmacion(titulo, mensaje, callback) {
            document.getElementById('titulo-confirmacion').textContent = titulo;
            document.getElementById('contenido-confirmacion').innerHTML = `<p>${mensaje}</p>`;
            document.getElementById('btn-confirmar-accion').onclick = callback;
            
            document.getElementById('modal-confirmacion').classList.remove('hidden');
            document.getElementById('modal-confirmacion').classList.add('flex');
        }

        // Funciones placeholder para desarrollo futuro
        function editarTarea(tareaId) {
            alert('🚧 Funcionalidad en desarrollo - Editar tarea');
        }

        function editarHistoria(historiaId) {
            alert('🚧 Funcionalidad en desarrollo - Editar historia');
        }

        function removerDelSprint(historiaId) {
            alert('🚧 Funcionalidad en desarrollo - Remover historia del sprint');
        }

        function abrirCargaMasiva() {
            alert('🚧 Funcionalidad en desarrollo - Carga masiva desde Excel');
        }

        function exportarDatos() {
            alert('🚧 Funcionalidad en desarrollo - Exportar datos del proyecto');
        }

        // Cargar datos inicial
        document.addEventListener('DOMContentLoaded', () => {
            cargarDatos();
        });
    </script>
</body>
</html>